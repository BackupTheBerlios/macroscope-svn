#include <adicpp/adicpp.h>
#include "CodeGenerator.h"
#include "SymbolTable.h"

using namespace ksys;

COMPILER kvm

  AutoPtr<CodeGenerator> gen;
  AutoPtr<SymbolTable> tab;

  bool IsFunc() const { return t->kind == _symbol && la->kind == _lpar; }
  bool IsFuncBody() const { return t->kind == _rpar && la->kind == _lbrace; }
  bool IsPrefixOp() const { return la->kind == _plus || la->kind == _minus; }

CHARACTERS
  letter    = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz" + '\u0080' .. '\ufdcf' + '\ufdf0' .. '\ufffd'.
  special   = "_@$" .
  ctrl      = '\u0000' .. '\u001f' .
  cr        = '\r' .
  lf        = '\n' .
  tab       = '\t' .
  space     = ' ' .

  zero          = '0' .
  zeroToThree   = zero + "123" .
  octalDigit    = zero + "1234567" . 
  nonZeroDigit  = "123456789" .
  digit         = '0' + nonZeroDigit .
  hexDigit      = digit + "ABCDEFabcdef" .

  char          = ANY - "'" - '\\' - ctrl .
  stringChar    = ANY - "\"" - '\\' - ctrl .

TOKENS
  symbol    = special | letter { special | letter | digit } .
  number    = digit { digit } .
/*
  intLit    =
    (  zero | nonZeroDigit { digit }
    | ( "0x" | "0X" ) hexDigit { hexDigit }
    | '0' octalDigit { octalDigit }
    ) [ "l" | "L" ] .

  floatLit  =
    "." digit {digit} 
    [("e" | "E") ["+" | "-"] digit {digit}] 
    [ "F" | "f" | "D" | "d" ]
    | digit {digit} 
    ( "." {digit} 
      [("e" | "E" ) ["+" | "-"] digit {digit} ] 
      [ "F" | "f" | "D" | "d" ]
      | ("e" | "E") ["+" | "-"] digit {digit}
      [ "F" | "f" | "D" | "d" ]
      | "F" | "f" | "D" | "d"
    ) .
*/    
  charLit = 
    "'" ( char
        | "\\" ( "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\"
               | "u" { "u" } hexDigit hexDigit hexDigit hexDigit
               | zeroToThree [ octalDigit ] [ octalDigit ]
               | octalDigit [ octalDigit ]
               )
        ) 
    "'" .
  stringLit = 
    "\"" { stringChar
         | "\\" ( "b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\"
                | "u" { "u" } hexDigit hexDigit hexDigit hexDigit
                | zeroToThree [ octalDigit ] [ octalDigit ]
                | octalDigit [ octalDigit ]
                )
         } 
    "\"" .

  semicolon = ";" .
  colon     = ":" .
  comma     = "," .
  dec       = "--" .
  dot       = "." .
  inc       = "++" .
  lbrace    = "{" .
  lbrack    = "[" .
  lpar      = "(" .
  not       = "!" .
  rbrace    = "}" .
  rbrack    = "]" .
  rpar      = ")" .
  tilde     = "~" .
  equ       = "=" .
  plus      = "+" .
  minus     = "-" .
  mul       = "*" .
  div       = "/" .
  remainder = "%" .

COMMENTS FROM "/*" TO "*/" NESTED
COMMENTS FROM "//" TO lf

IGNORE cr + lf + tab + ctrl

PRODUCTIONS

kvm =
  { classDecl<NULL> | pseudonymDecl<NULL> } .

expression<CodeObjectOwner * context,Expression * parentExpr,Expression * & expr> =
  (.
    union {
      CodeObject * lSym;
      Expression * lExpr;
    };
    union {
      CodeObject * rSym;
      Expression * rExpr;
    };
    if( expr == NULL ){
      expr = newObject<Expression>();
      tab->newSymbol(parentExpr != NULL ? parentExpr : context,NULL,expr);
    }
    Expression::Operator * op; .)
  [ 
    (
      plus  (.
        //expr->add(NULL);
        tab->newSymbol(expr,NULL,op = newObject<Expression::Plus>()); .) |
      minus (.
        //expr->add(NULL);
        tab->newSymbol(expr,NULL,op = newObject<Expression::Minus>()); .)
    )
    (. expr->add(op); .)
  ]
  (
    (lpar expression<context,expr,lExpr> (. expr->add(lExpr); .) rpar) |
    namespaceSymbol<context,lSym>        (. expr->add(lSym);  .)
  )
  (
    equ   (. tab->newSymbol(expr,NULL,op = newObject<Expression::Equ>());   .) |
    plus  (. tab->newSymbol(expr,NULL,op = newObject<Expression::Plus>());  .) |
    minus (. tab->newSymbol(expr,NULL,op = newObject<Expression::Minus>()); .) |
    mul   (. tab->newSymbol(expr,NULL,op = newObject<Expression::Mul>());   .) |
    div   (. tab->newSymbol(expr,NULL,op = newObject<Expression::Div>());   .)
  )
  (. expr->add(op); .)
  (
    (lpar expression<context,expr,rExpr> (. expr->add(rExpr); .) rpar) |
    namespaceSymbol<context,rSym>        (. expr->add(rSym);  .)
  ) .

classDecl<CodeObjectOwner * context> =
  ("class" | "класс") symbol (.
      Class * codeObject = newObject<Class>();
      tab->newSymbol(context,t->val,codeObject); .)
    lbrace
       {
         classDecl<codeObject> |
         classMemberDecl<codeObject> |
         pseudonymDecl<codeObject>
       }
    rbrace .

classMemberFuncCodeBlockDecl<Class::MemberFunc * func,Class::MemberFunc::CodeBlock * parentCodeBlock> =
  (.
    Class::MemberFunc::CodeBlock * context = newObject<Class::MemberFunc::CodeBlock>();
    if( parentCodeBlock == NULL )
      tab->newSymbol(func,NULL,context);
    else
      tab->newSymbol(parentCodeBlock,NULL,context); .)
  { 
    (. Expression * expr = NULL; .)
    (
      [
        "return" | "вернуть"
        (.
          expr = newObject<Expression>();
          tab->newSymbol(NULL,NULL,expr);
          Expression::Return * ret = newObject<Expression::Return>();
          tab->newSymbol(expr,NULL,ret);
          expr->add(ret); .)
      ]
      { expression<context,NULL,expr> } semicolon
    )
    |
    (lbrace classMemberFuncCodeBlockDecl<func,context>)
  }
  rbrace .

classMemberFuncParamDecl<Class::MemberFunc * context> =
  symbol (.
      Class::MemberFunc::Param * codeObject = newObject<Class::MemberFunc::Param>();
      tab->newSymbol(context,t->val,codeObject); .)
    .

classMemberDecl<CodeObjectOwner * context> =
  symbol (.
      Class::Member * codeObject = newObject<Class::Member>();
      tab->newSymbol(context,t->val,codeObject); .)
    ([
      lpar (.
        Class::MemberFunc * func = newObject<Class::MemberFunc>();
        tab->replaceObject(codeObject,func);
        codeObject = func; .)
      { classMemberFuncParamDecl<func> { comma classMemberFuncParamDecl<func> } }
      rpar
      [ lbrace classMemberFuncCodeBlockDecl<func,NULL> ]
    ])
    |
    (
      { comma classMemberDecl<context> } semicolon
    ) .

namespaceSymbol<CodeObjectOwner * context,CodeObject * & object> =
  symbol
    (.
      Symbol * symbol = tab->findSymbol(context,t->val,true);
      if( symbol == NULL ) for(;;){
        context = context->parent();
        if( context == NULL ) break;
        if( dynamic_cast<Class::MemberFunc *>(context) != NULL ){
          symbol = tab->findSymbol(context,t->val,true);
          if( symbol != NULL ) break;
	      }
	      else if( dynamic_cast<Class::MemberFunc::CodeBlock *>(context) != NULL ){
		      symbol = tab->findSymbol(context,t->val,true);
		      if( symbol != NULL ) break;
	      }
      }
      if( symbol == NULL ) symbol = tab->findSymbol(context,t->val);
      object = symbol->object(); .)
    { dot symbol (.
	    symbol = tab->findSymbol(dynamic_cast<CodeObjectOwner *>(object),t->val);
      object = symbol->object(); .)
    } .

pseudonymDecl<CodeObjectOwner * context> =
  ("pseudonym" | "псевдоним") (.
    CodeObject * localContext; .)
    namespaceSymbol<context,localContext> symbol (.
      tab->newSymbol(localContext->parent(),t->val,localContext,true); .)
    { symbol (.
      tab->newSymbol(localContext->parent(),t->val,localContext,true); .)
    }
    semicolon .

END kvm.
