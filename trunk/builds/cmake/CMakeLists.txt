PROJECT(libadicpp)
CMAKE_MINIMUM_REQUIRED(VERSION 2.0)

SET (BUILD_SHARED_LIBS OFF)
SET (CMAKE_BUILD_TYPE Debug Release RelWithDebInf MinSizeRel)

IF (NOT ROOT)
  SET (ROOT ../..)
ENDIF (NOT ROOT)
# PROJECT DEFINITIONS

#SET (EXECUTABLE_OUTPUT_PATH ${ROOT}/binaries)
#SET (LIBRARY_OUTPUT_PATH ${ROOT}/binaries)

INCLUDE_DIRECTORIES(${ROOT}/include)

ADD_SUBDIRECTORY(${ROOT}/src/libadicpp)
ADD_SUBDIRECTORY(${ROOT}/src/libfbcpp)
ADD_SUBDIRECTORY(${ROOT}/src/libksys)
ADD_SUBDIRECTORY(${ROOT}/src/libmycpp)
ADD_SUBDIRECTORY(${ROOT}/src/libutf8)
ADD_SUBDIRECTORY(${ROOT}/test/macroscope)
ADD_SUBDIRECTORY(${ROOT}/test/msftp)
ADD_SUBDIRECTORY(${ROOT}/test/msftpd)
ADD_SUBDIRECTORY(${ROOT}/test/msmail)

# Disable deprecation warnings for standard C functions.
IF(CMAKE_COMPILER_2005)
#  ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE)
  ADD_DEFINITIONS(-D_CRT_SECURE_NO_DEPRECATE)
ENDIF(CMAKE_COMPILER_2005)

INCLUDE (CMakeBackwardCompatibilityC)
INCLUDE (CMakeBackwardCompatibilityCXX)
# Include the standard Dart testing module
INCLUDE (Dart)

#INCLUDE(InstallRequiredSystemLibraries)
#IF(WIN32 AND NOT UNIX)
  # There is a bug in NSI that does not handle full unix paths properly. Make
  # sure there is at least one set of four (4) backlasshes.
#  SET(MSMAIL_PACKAGE_ICON "${CMake_SOURCE_DIR}/Utilities/Release\\\\CMakeInstall.bmp")
#  SET(MSMAIL_PACKAGE_EXECUTABLES "msmailSetup" "msmail")
#  SET(MSMAIL_NSIS_INSTALLED_ICON_NAME "msmailSetup.exe")
#  SET(MSMAIL_NSIS_DISPLAY_NAME "${MSMAIL_PACKAGE_INSTALL_DIRECTORY} a cross-platform, open-source message exchanging system")
#  SET(MSMAIL_NSIS_HELP_LINK "http://macroscope.berlios.de")
#  SET(MSMAIL_NSIS_URL_INFO_ABOUT "http://developer.berlios.de/projects/macroscope/")
#  SET(MSMAIL_NSIS_CONTACT "white_raven@users.berlios.de")
#  SET(MSMAIL_NSIS_MODIFY_PATH ON)
#ENDIF(WIN32 AND NOT UNIX)

#INCLUDE (TestBigEndian)
#TEST_BIG_ENDIAN(BYTE_ORDER)
IF (CMAKE_WORDS_BIGENDIAN EQUAL 0)
  SET (BYTE_ORDER "LITTLE_ENDIAN" CACHE INTERNAL "System little endian")
ELSE  (CMAKE_WORDS_BIGENDIAN EQUAL 0)
  SET (BYTE_ORDER "BIG_ENDIAN" CACHE INTERNAL "System big endian")
ENDIF (CMAKE_WORDS_BIGENDIAN EQUAL 0)

INCLUDE (CheckIncludeFiles)
INCLUDE (CheckIncludeFile)
INCLUDE (CheckIncludeFileCXX)

CHECK_INCLUDE_FILE(malloc.h HAVE_MALLOC_H)
CHECK_INCLUDE_FILE("sys/mount.h" HAVE_SYS_MOUNT_H)
CHECK_INCLUDE_FILE(dirent.h HAVE_DIRENT_H)
CHECK_INCLUDE_FILE(error.h HAVE_ERROR_H)
CHECK_INCLUDE_FILE(ibase.h HAVE_IBASE_H)
CHECK_INCLUDE_FILE(mysql.h HAVE_MYSQL_H)
CHECK_INCLUDE_FILE(lzo1x.h HAVE_LZO1X_H)
CHECK_INCLUDE_FILE(lzo_asm.h HAVE_LZO_ASM_H)
CHECK_INCLUDE_FILE(utime.h HAVE_UTIME_H)
CHECK_INCLUDE_FILE(sysexits.h HAVE_SYSEXITS_H)
CHECK_INCLUDE_FILE("sys/endian.h" HAVE_SYS_ENDIAN_H)
CHECK_INCLUDE_FILE("sys/types.h" HAVE_SYS_TYPES_H)
CHECK_INCLUDE_FILE("sys/ipc.h" HAVE_SYS_IPC_H)
CHECK_INCLUDE_FILE("sys/sem.h" HAVE_SYS_SEM_H)
CHECK_INCLUDE_FILE("sys/param.h" HAVE_SYS_PARAM_H)
CHECK_INCLUDE_FILE("sys/utsname.h" HAVE_SYS_UTSNAME_H)
CHECK_INCLUDE_FILE("sys/socket.h" HAVE_SYS_SOCKET_H)
CHECK_INCLUDE_FILE("sys/event.h" HAVE_SYS_EVENT_H)
CHECK_INCLUDE_FILE("sys/mman.h" HAVE_SYS_MMAN_H)
CHECK_INCLUDE_FILE("sys/uuid.h" HAVE_SYS_UUID_H)
CHECK_INCLUDE_FILE("sys/timeb.h" HAVE_SYSTIMEB_H)
CHECK_INCLUDE_FILE(aio.h HAVE_AIO_H)
CHECK_INCLUDE_FILE(sha256.h HAVE_SHA256_H)
CHECK_INCLUDE_FILE("netinet/in.h" HAVE_NETINET_IN_H)
CHECK_INCLUDE_FILE("arpa/inet.h" HAVE_ARPA_INET_H)
CHECK_INCLUDE_FILE(netdb.h HAVE_NETDB_H)
CHECK_INCLUDE_FILE(pwd.h HAVE_PWD_H)
CHECK_INCLUDE_FILE(grp.h HAVE_GRP_H)
CHECK_INCLUDE_FILE(limits.h HAVE_LIMITS_H)
CHECK_INCLUDE_FILE(io.h HAVE_IO_H)
CHECK_INCLUDE_FILE(err.h HAVE_ERR_H)
CHECK_INCLUDE_FILE(errno.h HAVE_ERRNO_H)
CHECK_INCLUDE_FILE(float.h HAVE_FLOAT_H)
CHECK_INCLUDE_FILE(fcntl.h HAVE_FCNTL_H)
CHECK_INCLUDE_FILE(stdarg.h HAVE_STDARG_H)
CHECK_INCLUDE_FILE(stdio.h HAVE_STDIO_H)
CHECK_INCLUDE_FILE(math.h HAVE_MATH_H)
CHECK_INCLUDE_FILE(locale.h HAVE_LOCALE_H)
CHECK_INCLUDE_FILE(pthread.h HAVE_PTHREAD_H)
CHECK_INCLUDE_FILE(signal.h HAVE_SIGNAL_H)
CHECK_INCLUDE_FILE(windows.h HAVE_WINDOWS_H)
CHECK_INCLUDE_FILE(typeinfo.h HAVE_TYPEINFO_H)
CHECK_INCLUDE_FILE(dlfcn.h HAVE_DLFCN_H)
CHECK_INCLUDE_FILE(assert.h HAVE_ASSERT_H)
CHECK_INCLUDE_FILE(semaphore.h HAVE_SEMAPHORE_H)
CHECK_INCLUDE_FILE(process.h HAVE_PROCESS_H)
CHECK_INCLUDE_FILE(ctype.h HAVE_CTYPE_H)
CHECK_INCLUDE_FILE(stdint.h HAVE_STDINT_H)
CHECK_INCLUDE_FILE(inttypes.h HAVE_INTTYPES_H)
CHECK_INCLUDE_FILE(unistd.h HAVE_UNISTD_H)
CHECK_INCLUDE_FILE(stddef.h HAVE_STDDEF_H)
CHECK_INCLUDE_FILE(paths.h HAVE_PATHS_H)
CHECK_INCLUDE_FILE_CXX(stdexept HAVE_STDEXCEPT)
CHECK_INCLUDE_FILE_CXX(new HAVE_NEW)
CHECK_INCLUDE_FILE_CXX(typeinfo HAVE_TYPEINFO)

#INCLUDE (1.txt)

INCLUDE (CheckTypeSize)

#MACRO(KCHECK_TYPE_SIZE type variable)
#  CHECK_TYPE_SIZE (${type} ${variable})
#  IF (NOT HAVE_${variable})
#    SET (HAVE_${variable} 1)
#    SET (${variable} 0)
#  ENDIF(NOT HAVE_${variable})
#ENDMACRO(KCHECK_TYPE_SIZE)

CHECK_TYPE_SIZE (ptrdiff_t SIZEOF_PTRDIFF_T)
CHECK_TYPE_SIZE ("struct sockaddr_in6" SIZEOF_SOCKADDR_IN6)
CHECK_TYPE_SIZE ("struct aiocb" SIZEOF_AIOCB)
CHECK_TYPE_SIZE ("void *" SIZEOF_VOID_P)
CHECK_TYPE_SIZE (bool SIZEOF_BOOL)
CHECK_TYPE_SIZE (char SIZEOF_CHAR)
CHECK_TYPE_SIZE (wchar_t SIZEOF_WCHAR_T)
CHECK_TYPE_SIZE (short SIZEOF_SHORT)
CHECK_TYPE_SIZE (int SIZEOF_INT)
CHECK_TYPE_SIZE (long SIZEOF_LONG)
CHECK_TYPE_SIZE ("long long" SIZEOF_LONG_LONG)
CHECK_TYPE_SIZE ("long int" SIZEOF_LONG_INT)
CHECK_TYPE_SIZE ("long double" SIZEOF_LONG_DOUBLE)
CHECK_TYPE_SIZE (intptr_t SIZEOF_INTPTR_T)
CHECK_TYPE_SIZE (intmax_t SIZEOF_INTMAX_T)
CHECK_TYPE_SIZE (socklen_t SIZEOF_SOCKLEN_T)
CHECK_TYPE_SIZE ("struct timeval" SIZEOF_TIMEVAL)
CHECK_TYPE_SIZE ("struct timezone" SIZEOF_TIMEZONE)
CHECK_TYPE_SIZE (uid_t SIZEOF_UID_T)
CHECK_TYPE_SIZE (gid_t SIZEOF_GID_T)

ENABLE_TESTING()

CONFIGURE_FILE(${ROOT}/include/adicpp/config.h.cmake ${ROOT}/include/adicpp/config.h)

ADD_DEFINITIONS(-DHAVE_CONFIG_H -DCMAKE_BUILD)
