PROJECT(macroscope)
CMAKE_MINIMUM_REQUIRED(VERSION 2.0)

# Shared settings

SET (BUILD_SHARED_LIBS OFF)
SET (CMAKE_BUILD_TYPE Debug Release RelWithDebInf MinSizeRel)
#SET (EXECUTABLE_OUTPUT_PATH ${ROOT}/binaries)
#SET (LIBRARY_OUTPUT_PATH ${ROOT}/binaries)

# Disable deprecation warnings for standard C functions.
IF (CMAKE_COMPILER_2005)
#  ADD_DEFINITIONS (-D_CRT_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE)
  ADD_DEFINITIONS (-D_CRT_SECURE_NO_DEPRECATE)
  SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_CRT_SECURE_NO_DEPRECATE")
  SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_CRT_SECURE_NO_DEPRECATE")
ENDIF (CMAKE_COMPILER_2005)

ADD_DEFINITIONS (-DHAVE_CONFIG_H -DCMAKE_BUILD)
IF (WIN32 AND NOT UNIX)
  ADD_DEFINITIONS (-D_WIN32_WINNT=0x0502)
  SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_WIN32_WINNT=0x0502")
  SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_WIN32_WINNT=0x0502")
ENDIF (WIN32 AND NOT UNIX)

IF (NOT ROOT)
  SET (ROOT ../..)
ENDIF (NOT ROOT)

INCLUDE_DIRECTORIES(${ROOT}/include)

# Targets definition

ADD_SUBDIRECTORY(${ROOT}/src/libadicpp)
ADD_SUBDIRECTORY(${ROOT}/src/libfbcpp)
ADD_SUBDIRECTORY(${ROOT}/src/libksys)
ADD_SUBDIRECTORY(${ROOT}/src/libmycpp)
ADD_SUBDIRECTORY(${ROOT}/src/libutf8)
ADD_SUBDIRECTORY(${ROOT}/test/macroscope)
ADD_SUBDIRECTORY(${ROOT}/test/msftp)
ADD_SUBDIRECTORY(${ROOT}/test/msftpd)
ADD_SUBDIRECTORY(${ROOT}/test/msmail)
IF (WIN32 AND NOT UNIX)
  ADD_SUBDIRECTORY(${ROOT}/test/msmail1clib)
ENDIF (WIN32 AND NOT UNIX)

INCLUDE (CMakeBackwardCompatibilityC)
INCLUDE (CMakeBackwardCompatibilityCXX)
# Include the standard Dart testing module
#INCLUDE (Dart)

#INCLUDE (TestBigEndian)
#TEST_BIG_ENDIAN(BYTE_ORDER)
IF (CMAKE_WORDS_BIGENDIAN EQUAL 0)
  SET (BYTE_ORDER "LITTLE_ENDIAN" CACHE INTERNAL "System little endian")
ELSE  (CMAKE_WORDS_BIGENDIAN EQUAL 0)
  SET (BYTE_ORDER "BIG_ENDIAN" CACHE INTERNAL "System big endian")
ENDIF (CMAKE_WORDS_BIGENDIAN EQUAL 0)

# Check for headers

#INCLUDE (CheckIncludeFiles)
INCLUDE (CheckIncludeFile.cmake)
INCLUDE (CheckIncludeFileCXX)

CHECK_INCLUDE_FILE(malloc.h HAVE_MALLOC_H)
CHECK_INCLUDE_FILE("sys/mount.h" HAVE_SYS_MOUNT_H)
CHECK_INCLUDE_FILE(dirent.h HAVE_DIRENT_H)
CHECK_INCLUDE_FILE(error.h HAVE_ERROR_H)
CHECK_INCLUDE_FILE(ibase.h HAVE_IBASE_H)
CHECK_INCLUDE_FILE(mysql.h HAVE_MYSQL_H)
CHECK_INCLUDE_FILE("lzo/lzo1x.h" HAVE_LZO_LZO1X_H)
CHECK_INCLUDE_FILE(lzo1x.h HAVE_LZO1X_H)
CHECK_INCLUDE_FILE("lzo/lzo_asm.h" HAVE_LZO_LZO_ASM_H)
CHECK_INCLUDE_FILE(lzo_asm.h HAVE_LZO_ASM_H)
CHECK_INCLUDE_FILE(utime.h HAVE_UTIME_H)
CHECK_INCLUDE_FILE(sysexits.h HAVE_SYSEXITS_H)
CHECK_INCLUDE_FILE("sys/endian.h" HAVE_SYS_ENDIAN_H)
CHECK_INCLUDE_FILE("sys/types.h" HAVE_SYS_TYPES_H)
CHECK_INCLUDE_FILE("sys/ipc.h" HAVE_SYS_IPC_H)
CHECK_INCLUDE_FILE("sys/sem.h" HAVE_SYS_SEM_H)
CHECK_INCLUDE_FILE("sys/param.h" HAVE_SYS_PARAM_H)
CHECK_INCLUDE_FILE("sys/utsname.h" HAVE_SYS_UTSNAME_H)
CHECK_INCLUDE_FILE("sys/socket.h" HAVE_SYS_SOCKET_H)
CHECK_INCLUDE_FILE("sys/event.h" HAVE_SYS_EVENT_H)
CHECK_INCLUDE_FILE("sys/mman.h" HAVE_SYS_MMAN_H)
CHECK_INCLUDE_FILE("sys/uuid.h" HAVE_SYS_UUID_H)
CHECK_INCLUDE_FILE("sys/timeb.h" HAVE_SYS_TIMEB_H)
CHECK_INCLUDE_FILE("sys/stat.h" HAVE_SYS_STAT_H)
CHECK_INCLUDE_FILE(aio.h HAVE_AIO_H)
CHECK_INCLUDE_FILE(sha256.h HAVE_SHA256_H)
CHECK_INCLUDE_FILE("netinet/in.h" HAVE_NETINET_IN_H)
CHECK_INCLUDE_FILE("arpa/inet.h" HAVE_ARPA_INET_H)
CHECK_INCLUDE_FILE(netdb.h HAVE_NETDB_H)
CHECK_INCLUDE_FILE(pwd.h HAVE_PWD_H)
CHECK_INCLUDE_FILE(grp.h HAVE_GRP_H)
CHECK_INCLUDE_FILE(limits.h HAVE_LIMITS_H)
CHECK_INCLUDE_FILE(io.h HAVE_IO_H)
CHECK_INCLUDE_FILE(err.h HAVE_ERR_H)
CHECK_INCLUDE_FILE(errno.h HAVE_ERRNO_H)
CHECK_INCLUDE_FILE(float.h HAVE_FLOAT_H)
CHECK_INCLUDE_FILE(fcntl.h HAVE_FCNTL_H)
CHECK_INCLUDE_FILE(stdarg.h HAVE_STDARG_H)
CHECK_INCLUDE_FILE(stdio.h HAVE_STDIO_H)
CHECK_INCLUDE_FILE(math.h HAVE_MATH_H)
CHECK_INCLUDE_FILE(locale.h HAVE_LOCALE_H)
CHECK_INCLUDE_FILE(pthread.h HAVE_PTHREAD_H)
CHECK_INCLUDE_FILE(signal.h HAVE_SIGNAL_H)
CHECK_INCLUDE_FILE(typeinfo.h HAVE_TYPEINFO_H)
CHECK_INCLUDE_FILE(dlfcn.h HAVE_DLFCN_H)
CHECK_INCLUDE_FILE(assert.h HAVE_ASSERT_H)
CHECK_INCLUDE_FILE(semaphore.h HAVE_SEMAPHORE_H)
CHECK_INCLUDE_FILE(process.h HAVE_PROCESS_H)
CHECK_INCLUDE_FILE(ctype.h HAVE_CTYPE_H)
CHECK_INCLUDE_FILE(stdint.h HAVE_STDINT_H)
CHECK_INCLUDE_FILE(inttypes.h HAVE_INTTYPES_H)
CHECK_INCLUDE_FILE(unistd.h HAVE_UNISTD_H)
CHECK_INCLUDE_FILE(stddef.h HAVE_STDDEF_H)
CHECK_INCLUDE_FILE(paths.h HAVE_PATHS_H)
CHECK_INCLUDE_FILE_CXX(stdexept HAVE_STDEXCEPT)
CHECK_INCLUDE_FILE_CXX(new HAVE_NEW)
CHECK_INCLUDE_FILE_CXX(typeinfo HAVE_TYPEINFO)

CHECK_INCLUDE_FILE(winsock.h HAVE_WINSOCK_H)
CHECK_INCLUDE_FILE(winsock2.h HAVE_WINSOCK2_H)
CHECK_INCLUDE_FILE(windows.h HAVE_WINDOWS_H)
IF (${HAVE_WINSOCK2_H})
  SET (CMAKE_EXTRA_INCLUDE_FILES winsock2.h)
ELSE (${HAVE_WINSOCK2_H})
  IF (${HAVE_WINSOCK_H})
    SET (CMAKE_EXTRA_INCLUDE_FILES winsock.h)
  ENDIF (${HAVE_WINSOCK_H})
ENDIF (${HAVE_WINSOCK2_H})
CHECK_INCLUDE_FILE(ws2tcpip.h HAVE_WS2TCPIP_H)
SET (CMAKE_EXTRA_INCLUDE_FILES)

# Check for types

INCLUDE (CheckTypeSize.cmake)

SET (CMAKE_EXTRA_INCLUDE_FILES inttypes.h)

CHECK_TYPE_SIZE (ptrdiff_t SIZEOF_PTRDIFF_T)
CHECK_TYPE_SIZE ("void *" SIZEOF_VOID_P)
CHECK_TYPE_SIZE (bool SIZEOF_BOOL)
CHECK_TYPE_SIZE (char SIZEOF_CHAR)
CHECK_TYPE_SIZE (wchar_t SIZEOF_WCHAR_T)
CHECK_TYPE_SIZE (short SIZEOF_SHORT)
CHECK_TYPE_SIZE (int SIZEOF_INT)
CHECK_TYPE_SIZE (long SIZEOF_LONG)
CHECK_TYPE_SIZE ("long long" SIZEOF_LONG_LONG)
CHECK_TYPE_SIZE ("long int" SIZEOF_LONG_INT)
CHECK_TYPE_SIZE ("long double" SIZEOF_LONG_DOUBLE)
CHECK_TYPE_SIZE (intptr_t SIZEOF_INTPTR_T)
CHECK_TYPE_SIZE (intmax_t SIZEOF_INTMAX_T)
CHECK_TYPE_SIZE (socklen_t SIZEOF_SOCKLEN_T)
CHECK_TYPE_SIZE (uid_t SIZEOF_UID_T)
CHECK_TYPE_SIZE (gid_t SIZEOF_GID_T)
CHECK_TYPE_SIZE (__int8 SIZEOF__INT8)
CHECK_TYPE_SIZE (__int16 SIZEOF__INT16)
CHECK_TYPE_SIZE (__int32 SIZEOF__INT32)
CHECK_TYPE_SIZE (__int64 SIZEOF__INT64)
CHECK_TYPE_SIZE (int8_t SIZEOF_INT8_T)
CHECK_TYPE_SIZE (int16_t SIZEOF_INT16_T)
CHECK_TYPE_SIZE (int32_t SIZEOF_INT32_T)
CHECK_TYPE_SIZE (int64_t SIZEOF_INT64_T)
CHECK_TYPE_SIZE (intmax_t SIZEOF_INTMAX_T)

CHECK_TYPE_SIZE ("struct timeval" SIZEOF_TIMEVAL)
CHECK_TYPE_SIZE ("struct timezone" SIZEOF_TIMEZONE)
CHECK_TYPE_SIZE ("struct aiocb" SIZEOF_AIOCB)

SET (CMAKE_EXTRA_INCLUDE_FILES winsock2.h winsock.h ws2tcpip.h "netinet/in.h")
CHECK_TYPE_SIZE ("struct sockaddr_in6" SIZEOF_SOCKADDR_IN6)

SET (CMAKE_EXTRA_INCLUDE_FILES "sys/stat.h")

CHECK_TYPE_SIZE ("struct stat64" SIZEOF_STAT64)
CHECK_TYPE_SIZE ("struct _stat64" SIZEOF__STAT64)

SET (CMAKE_EXTRA_INCLUDE_FILES)
SET (CMAKE_REQUIRED_DEFINITIONS)

INCLUDE (CheckTypeEqual.cmake)

CHECK_TYPE_EQUAL (intptr_t int HAVE_INTPTR_T_AS_INT)
CHECK_TYPE_EQUAL (intptr_t "long int" HAVE_INTPTR_T_AS_LONG_INT)
CHECK_TYPE_EQUAL (intptr_t "long long" HAVE_INTPTR_T_AS_LONG_LONG)
CHECK_TYPE_EQUAL (intptr_t intmax_t HAVE_INTPTR_T_AS_INTMAX_T)
CHECK_TYPE_EQUAL (intptr_t int32_t HAVE_INTPTR_T_AS_INT32_T)
CHECK_TYPE_EQUAL (intptr_t int64_t HAVE_INTPTR_T_AS_INT64_T)
CHECK_TYPE_EQUAL (int32_t int HAVE_INT32_T_AS_INT)
CHECK_TYPE_EQUAL (int64_t intmax_t HAVE_INT64_T_AS_INTMAX_T)

ENABLE_TESTING()

CONFIGURE_FILE(${ROOT}/include/adicpp/config.h.cmake ${ROOT}/include/adicpp/config.h)

# Install

SET (CPACK_PACKAGE_DESCRIPTION_SUMMARY "")
SET (CPACK_PACKAGE_VENDOR "Korvin")
SET (CPACK_PACKAGE_EXECUTABLES "macroscope" "Macroscope")
SET (CPACK_PACKAGE_VERSION_MAJOR "1")
SET (CPACK_PACKAGE_VERSION_MINOR "0")
SET (CPACK_PACKAGE_VERSION_PATCH "223")
SET (install_target macroscope)

INCLUDE (InstallRequiredSystemLibraries)
INCLUDE (CPack)

IF (WIN32 AND NOT UNIX)
  FIND_PROGRAM(NSIS_MAKENSIS NAMES makensis
    PATHS [HKEY_LOCAL_MACHINE\\SOFTWARE\\NSIS]
    DOC "Where is makensis.exe located"
  )
  IF (NOT NSIS_MAKENSIS)
    SET (CPACK_GENERATOR TGZ)
  ENDIF (NOT NSIS_MAKENSIS)
ENDIF(WIN32 AND NOT UNIX)

SET (CPACK_PACKAGE_DESCRIPTION_SUMMARY "")
SET (CPACK_PACKAGE_VENDOR "KOrvin")
SET (CPACK_PACKAGE_EXECUTABLES "macroscope" "Macroscope")
SET (CPACK_PACKAGE_VERSION_MAJOR "1")
SET (CPACK_PACKAGE_VERSION_MINOR "0")
SET (CPACK_PACKAGE_VERSION_PATCH "222")
SET (install_target macroscope)

INCLUDE (InstallRequiredSystemLibraries)
INCLUDE (CPack)

IF (APPLE)
  # Issue with packaging on the mac, so disable it for now
  ADD_CUSTOM_COMMAND(
    TARGET ${install_target}
    POST_BUILD
    COMMAND ${CMAKE_CTEST_COMMAND}
    ARGS ${SI_CONFIG}
    --build-and-test
    ${CMAKE_SOURCE_DIR}
    ${CMAKE_BINARY_DIR}
    --build-generator ${CMAKE_GENERATOR}
    --build-project ${PROJECT_NAME}
    --build-makeprogram ${CMAKE_MAKE_PROGRAM}
    --build-noclean
    --build-target install
    COMMENT "Install Project"
  )
ELSE (APPLE)
  ADD_CUSTOM_COMMAND(
    TARGET ${install_target}
    POST_BUILD
    COMMAND ${CMAKE_CTEST_COMMAND}
    ARGS ${SI_CONFIG}
    --build-and-test
    ${CMAKE_SOURCE_DIR}
    ${CMAKE_BINARY_DIR}
    --build-generator ${CMAKE_GENERATOR}
    --build-project ${PROJECT_NAME}
    --build-makeprogram ${CMAKE_MAKE_PROGRAM}
    --build-noclean
    --build-target install
    --build-target package
    COMMENT "Install Project"
  )
ENDIF (APPLE)
