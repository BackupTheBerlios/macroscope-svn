CMAKE_MINIMUM_REQUIRED(VERSION 2.4)

# Options
SET (BUILD_SHARED_LIBS OFF)
SET (CMAKE_VERBOSE_MAKEFILE OFF)
SET (CMAKE_USE_RELATIVE_PATHS OFF)

SITE_NAME (SITE)
IF (NOT MAIN_SITE)
  SET (MAIN_SITE system amber blackhole post2)
ENDIF (NOT MAIN_SITE)

#SET (CMAKE_BINARY_DIR "builds/cmake")
#SET (CMAKE_MODULE_PATH "builds/cmake")

FIND_PROGRAM (ICL icl)
IF (ICL)
  SET (CMAKE_C_COMPILER ${ICL})
  SET (CMAKE_CXX_COMPILER ${ICL})
ENDIF (ICL)

PROJECT (macroscope)

SET (CMAKE_BUILD 1)

IF (WIN32 AND NOT UNIX)
  SET (INSTALL_BIN_DIR "")
  SET (INSTALL_ETC_DIR "")
  SET (INSTALL_DOC_DIR "")
ELSE (WIN32 AND NOT UNIX)
  SET (INSTALL_BIN_DIR "/usr/local/sbin")
  SET (INSTALL_ETC_DIR "/usr/local/etc")
  SET (INSTALL_DOC_DIR "/usr/local/share/macroscope")
ENDIF (WIN32 AND NOT UNIX)

INSTALL (FILES AUTHORS DESTINATION "${INSTALL_DOC_DIR}")
INSTALL (FILES INSTALL DESTINATION "${INSTALL_DOC_DIR}")
INSTALL (FILES NEWS DESTINATION "${INSTALL_DOC_DIR}")
INSTALL (FILES README DESTINATION "${INSTALL_DOC_DIR}")

# the complete system name, e.g. "Linux-2.4.22", "FreeBSD-5.4-RELEASE" or "Windows 5.1"
#MESSAGE( STATUS "CMAKE_SYSTEM: " ${CMAKE_SYSTEM} )
# the short system name, e.g. "Linux", "FreeBSD" or "Windows"
#MESSAGE( STATUS "CMAKE_SYSTEM_NAME: " ${CMAKE_SYSTEM_NAME} )
# only the version part of CMAKE_SYSTEM 
#MESSAGE( STATUS "CMAKE_SYSTEM_VERSION: " ${CMAKE_SYSTEM_VERSION} )
# the processor name (e.g. "Intel(R) Pentium(R) M processor 2.00GHz")
#MESSAGE( STATUS "CMAKE_SYSTEM_PROCESSOR: " ${CMAKE_SYSTEM_PROCESSOR} )
# the compiler used for C files
#MESSAGE( STATUS "CMAKE_C_COMPILER: " ${CMAKE_C_COMPILER} )
#MESSAGE( STATUS "CMAKE_C_FLAGS: " ${CMAKE_C_FLAGS} )
#MESSAGE( STATUS "CMAKE_C_FLAGS_DEBUG: " ${CMAKE_C_FLAGS_DEBUG} )
#MESSAGE( STATUS "CMAKE_C_FLAGS_RELWITHDEBINFO: " ${CMAKE_C_FLAGS_RELWITHDEBINFO} )
#MESSAGE( STATUS "CMAKE_C_FLAGS_RELEASE: " ${CMAKE_C_FLAGS_RELEASE} )
#MESSAGE( STATUS "CMAKE_C_FLAGS_MINSIZEREL: " ${CMAKE_C_FLAGS_MINSIZEREL} )
# the compiler used for C++ files
#MESSAGE( STATUS "CMAKE_CXX_COMPILER: " ${CMAKE_CXX_COMPILER} )
#MESSAGE( STATUS "CMAKE_CXX_FLAGS: " ${CMAKE_CXX_FLAGS} )
#MESSAGE( STATUS "CMAKE_EXE_LINKER_FLAGS: " ${CMAKE_EXE_LINKER_FLAGS} )
#MESSAGE( STATUS "CMAKE_CXX_FLAGS_DEBUG: " ${CMAKE_CXX_FLAGS_DEBUG} )
#MESSAGE( STATUS "CMAKE_EXE_LINKER_FLAGS_DEBUG: " ${CMAKE_EXE_LINKER_FLAGS_DEBUG} )
#MESSAGE( STATUS "CMAKE_CXX_FLAGS_RELWITHDEBINFO: " ${CMAKE_CXX_FLAGS_RELWITHDEBINFO} )
#MESSAGE( STATUS "CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO: " ${CMAKE_EXE_LINKER_FLAGS_RELWITHDEBINFO} )
#MESSAGE( STATUS "CMAKE_CXX_FLAGS_RELEASE: " ${CMAKE_CXX_FLAGS_RELEASE} )
#MESSAGE( STATUS "CMAKE_EXE_LINKER_FLAGS_RELEASE: " ${CMAKE_EXE_LINKER_FLAGS_RELEASE} )
#MESSAGE( STATUS "CMAKE_CXX_FLAGS_MINSIZEREL: " ${CMAKE_CXX_FLAGS_MINSIZEREL} )
#MESSAGE( STATUS "CMAKE_CXX_LINK_EXECUTABLE: " ${CMAKE_CXX_LINK_EXECUTABLE} )
#MESSAGE( STATUS "CMAKE_CXX_LINK_FLAGS: " ${CMAKE_CXX_LINK_FLAGS} )
#MESSAGE( STATUS "LINK_LIBRARIES: " ${LINK_LIBRARIES} )
#MESSAGE( STATUS "LINK_FLAGS: " ${LINK_FLAGS} )
#MESSAGE( STATUS "LD_FLAGS: " ${LD_FLAGS} )

#INCLUDE (CMakePrintSystemInformation)

IF (NOT CMAKE_BUILD_TYPE)
  SET (CMAKE_BUILD_TYPE Release)
ENDIF (NOT CMAKE_BUILD_TYPE)

SET (CMAKE_CONFIGURATION_TYPES ${CMAKE_BUILD_TYPE})
STRING (REPLACE " " "_" CMAKE_SYSTEM_NAME_NORMALIZED ${CMAKE_SYSTEM_NAME})
STRING (REPLACE " " "_" CMAKE_SYSTEM_VERSION_NORMALIZED ${CMAKE_SYSTEM_VERSION})
ADD_DEFINITIONS (-DHAVE_CONFIG_H)

IF (CMAKE_BUILD_TYPE STREQUAL Debug)
  SET (CMAKE_BUILD_TYPE_ENUM 1)
ENDIF (CMAKE_BUILD_TYPE STREQUAL Debug)
IF (CMAKE_BUILD_TYPE STREQUAL Release)
  SET (CMAKE_BUILD_TYPE_ENUM 2)
ENDIF (CMAKE_BUILD_TYPE STREQUAL Release)
IF (CMAKE_BUILD_TYPE STREQUAL RelWithDebInfo)
  SET (CMAKE_BUILD_TYPE_ENUM 3)
ENDIF (CMAKE_BUILD_TYPE STREQUAL RelWithDebInfo)
IF (CMAKE_BUILD_TYPE STREQUAL MinSizeRel)
  SET (CMAKE_BUILD_TYPE_ENUM 4)
ENDIF (CMAKE_BUILD_TYPE STREQUAL MinSizeRel)

IF (NOT ${CMAKE_GENERATOR} MATCHES "Visual Studio")
  SET (CMAKE_BUILD_TYPE_DIR)
ELSE (NOT ${CMAKE_GENERATOR} MATCHES "Visual Studio")
  SET (CMAKE_GENERATOR_IS_VS 1)
  SET (CMAKE_BUILD_TYPE_DIR "${CMAKE_BUILD_TYPE}")
ENDIF (NOT ${CMAKE_GENERATOR} MATCHES "Visual Studio")

STRING (TOUPPER ${CMAKE_BUILD_TYPE} CMAKE_BUILD_TYPE_UPPER)
STRING (TOLOWER ${CMAKE_BUILD_TYPE} CMAKE_BUILD_TYPE_LOWER)

IF (WIN32 AND NOT UNIX)
  ADD_DEFINITIONS (-D_WIN32_WINNT=0x0502)
  SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_WIN32_WINNT=0x0502")
ENDIF (WIN32 AND NOT UNIX)

IF (CMAKE_COMPILER_IS_GNUCXX)
#  SET (CMAKE_CXX_COMPILER g++41)
  SET (CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER} "${CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER}} -pipe -Wall -fno-strict-aliasing")
  SET (CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER} "${CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER}} -pipe -fexceptions -Wall -fno-strict-aliasing")
  IF (CMAKE_BUILD_TYPE MATCHES Deb)
    SET (CMAKE_EXE_LINKER_FLAGS_${CMAKE_BUILD_TYPE_UPPER} "${CMAKE_EXE_LINKER_FLAGS_${CMAKE_BUILD_TYPE_UPPER}} -Wl,--export-dynamic")
    SET (CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER} "${CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER}} -Werror")
    SET (CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER} "${CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER}} -Werror")
  ENDIF (CMAKE_BUILD_TYPE MATCHES Deb)
  EXECUTE_PROCESS (
    COMMAND ${CMAKE_CXX_COMPILER} --version
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
    RESULT_VARIABLE CMAKE_CXX_COMPILER_RESULT
    OUTPUT_VARIABLE CMAKE_CXX_COMPILER_OUTPUT
    ERROR_VARIABLE CMAKE_CXX_COMPILER_ERROR
  )
  IF (CMAKE_CXX_COMPILER_RESULT EQUAL 0)
    STRING (REPLACE "\n" " " CMAKE_CXX_COMPILER_VERSION ${CMAKE_CXX_COMPILER_OUTPUT})
    SET (CMAKE_CXX_COMPILER_VERSION ${CMAKE_CXX_COMPILER_VERSION} CACHE INTERNAL "C++ compiler version")
  ENDIF (CMAKE_CXX_COMPILER_RESULT EQUAL 0)
  IF (CMAKE_SYSTEM_NAME STREQUAL FreeBSD)
    SET (CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER} "${CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER}} -pthread")
    SET (CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER} "${CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER}} -pthread")
    IF (CMAKE_SYSTEM_PROCESSOR MATCHES i386 AND CMAKE_BUILD_TYPE MATCHES Rel AND CMAKE_CXX_COMPILER_VERSION MATCHES " 3.4.[2,6] ")
      STRING (REPLACE "-O2" "-O0" CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER} ${CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER}})
      STRING (REPLACE "-O3" "-O0" CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER} ${CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER}})
      STRING (REPLACE "-O2" "-O0" CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER} ${CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER}})
      STRING (REPLACE "-O3" "-O0" CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER} ${CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER}})
#      SET (CMAKE_FLAGS_ADD "-fno-schedule-insns -fno-schedule-insns2 -fno-unit-at-a-time")
#      SET (CMAKE_FLAGS_ADD "${CMAKE_FLAGS_ADD} -fno-omit-frame-pointer")
      SET (CMAKE_FLAGS_ADD "${CMAKE_FLAGS_ADD} -fdefer-pop -fmerge-constants -fthread-jumps -floop-optimize -fif-conversion -fif-conversion2 -fguess-branch-probability -fcprop-registers")
      SET (CMAKE_FLAGS_ADD "${CMAKE_FLAGS_ADD} -fschedule-insns -fschedule-insns2 -funit-at-a-time -fforce-mem -foptimize-sibling-calls -fstrength-reduce -fcse-follow-jumps -fcse-skip-blocks -frerun-cse-after-loop -frerun-loop-opt -fgcse -fgcse-lm -fgcse-sm -fgcse-las -fdelete-null-pointer-checks -fexpensive-optimizations -fregmove -fsched-interblock -fsched-spec -fcaller-saves -fpeephole2 -freorder-blocks  -freorder-functions -falign-functions -falign-jumps -falign-loops -falign-labels -fcrossjumping")
      SET (CMAKE_FLAGS_ADD "${CMAKE_FLAGS_ADD} -fweb -frename-registers")
      SET (CMAKE_FLAGS_ADD "${CMAKE_FLAGS_ADD} -finline-functions")
      SET (CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER} "${CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER}} ${CMAKE_FLAGS_ADD}")
      SET (CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER} "${CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER}} ${CMAKE_FLAGS_ADD}")
    ENDIF (CMAKE_SYSTEM_PROCESSOR MATCHES i386 AND CMAKE_BUILD_TYPE MATCHES Rel AND CMAKE_CXX_COMPILER_VERSION MATCHES " 3.4.[2,6] ")
  ENDIF (CMAKE_SYSTEM_NAME STREQUAL FreeBSD)
  IF (CMAKE_BUILD_TYPE STREQUAL RelWithDebInfo)
    STRING (REPLACE "-O2" "-O" CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER} ${CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER}})
    STRING (REPLACE "-O2" "-O" CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER} ${CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER}})
  ENDIF (CMAKE_BUILD_TYPE STREQUAL RelWithDebInfo)
ELSE (CMAKE_COMPILER_IS_GNUCXX)
  EXECUTE_PROCESS (
    COMMAND ${CMAKE_CXX_COMPILER} -help
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
    RESULT_VARIABLE CMAKE_CXX_COMPILER_RESULT
    OUTPUT_VARIABLE CMAKE_CXX_COMPILER_OUTPUT
    ERROR_VARIABLE CMAKE_CXX_COMPILER_ERROR
  )
  IF (CMAKE_CXX_COMPILER_RESULT EQUAL 0)
    STRING (REPLACE "\n" " " CMAKE_CXX_COMPILER_VERSION ${CMAKE_CXX_COMPILER_OUTPUT})
    SET (CMAKE_CXX_COMPILER_VERSION ${CMAKE_CXX_COMPILER_VERSION} CACHE INTERNAL "C++ compiler version")
  ENDIF (CMAKE_CXX_COMPILER_RESULT EQUAL 0)
ENDIF (CMAKE_COMPILER_IS_GNUCXX)

# Disable deprecation warnings for standard C functions.
IF (CMAKE_COMPILER_2005 OR CMAKE_CXX_COMPILER_VERSION MATCHES Compiler)
  IF (CMAKE_COMPILER_2005 OR CMAKE_CXX_COMPILER_VERSION MATCHES Microsoft OR CMAKE_CXX_COMPILER_VERSION MATCHES Intel)
#    ADD_DEFINITIONS (-D_CRT_NONSTDC_NO_DEPRECATE)
    ADD_DEFINITIONS (-D_CRT_SECURE_NO_DEPRECATE)
    SET (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} -D_CRT_SECURE_NO_DEPRECATE")
    SET (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -D_CRT_SECURE_NO_DEPRECATE")
  ENDIF (CMAKE_COMPILER_2005 OR CMAKE_CXX_COMPILER_VERSION MATCHES Microsoft OR CMAKE_CXX_COMPILER_VERSION MATCHES Intel)
ENDIF (CMAKE_COMPILER_2005 OR CMAKE_CXX_COMPILER_VERSION MATCHES Compiler)

IF (${CMAKE_CXX_COMPILER} MATCHES cl)
  STRING (REPLACE "/INCREMENTAL:YES" "" CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS}")
  STRING (REPLACE "/INCREMENTAL:NO" "" CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS}")
  SET (CMAKE_EXE_LINKER_FLAGS_${CMAKE_BUILD_TYPE_UPPER} "${CMAKE_EXE_LINKER_FLAGS_${CMAKE_BUILD_TYPE_UPPER}} /MAP /MAPINFO:EXPORTS")
  SET (CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER} "${CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER}} /GF")
  STRING (REPLACE "/MD" "/MT" CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER} ${CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER}})
  STRING (REPLACE "/MD" "/MT" CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER} ${CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER}})
  STRING (REPLACE "/O2" "/Ox" CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER} ${CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER}})
  STRING (REPLACE "/O2" "/Ox" CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER} ${CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER}})
  STRING (REPLACE "/Ob2" "" CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER} ${CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER}})
  STRING (REPLACE "/Ob2" "" CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER} ${CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER}})
  IF (NOT CMAKE_BUILD_TYPE MATCHES Deb)
    SET (CMAKE_EXE_LINKER_FLAGS_${CMAKE_BUILD_TYPE_UPPER} "${CMAKE_EXE_LINKER_FLAGS_${CMAKE_BUILD_TYPE_UPPER}} /LTCG")
    SET (CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER} "${CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER}} /GL")
    SET (CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER} "${CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER}} /GL")
  ENDIF (NOT CMAKE_BUILD_TYPE MATCHES Deb)
  IF (${CMAKE_CXX_COMPILER} MATCHES icl)
#/Qvec-report0
    STRING (REPLACE "/GL" "" CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER} ${CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER}})
    STRING (REPLACE "/GL" "" CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER} ${CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER}})
    STRING (REPLACE "/Ox" "/O3 /QaxKWNBPT" CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER} ${CMAKE_C_FLAGS_${CMAKE_BUILD_TYPE_UPPER}})
    STRING (REPLACE "/Ox" "/O3 /QaxKWNBPT" CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER} ${CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER}})
#    SET (CMAKE_C_FLAGS_RELEASE "${CMAKE_C_FLAGS_RELEASE} /Qinline-max-size=5000")
#    SET (CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} /Qinline-max-size=5000")
    STRING (REPLACE "/LTCG" "" CMAKE_EXE_LINKER_FLAGS_${CMAKE_BUILD_TYPE_UPPER} ${CMAKE_EXE_LINKER_FLAGS_${CMAKE_BUILD_TYPE_UPPER}})

    SET (CMAKE_CXX_CREATE_SHARED_LIBRARY 
      "xilink ${CMAKE_CL_NOLOGO} ${CMAKE_START_TEMP_FILE} /out:<TARGET> /dll <LINK_FLAGS> <OBJECTS> <LINK_LIBRARIES> ${CMAKE_END_TEMP_FILE}")
    SET (CMAKE_CXX_CREATE_SHARED_MODULE ${CMAKE_CXX_CREATE_SHARED_LIBRARY})
    SET (CMAKE_C_CREATE_SHARED_LIBRARY ${CMAKE_CXX_CREATE_SHARED_LIBRARY})
    SET (CMAKE_C_CREATE_SHARED_MODULE ${CMAKE_C_CREATE_SHARED_LIBRARY})
    SET (CMAKE_CXX_CREATE_STATIC_LIBRARY "xilib ${CMAKE_CL_NOLOGO} <LINK_FLAGS> /out:<TARGET> <OBJECTS> ")
    SET (CMAKE_C_CREATE_STATIC_LIBRARY ${CMAKE_CXX_CREATE_STATIC_LIBRARY})
    SET (CMAKE_C_LINK_EXECUTABLE
      "<CMAKE_C_COMPILER> ${CMAKE_CL_NOLOGO} ${CMAKE_START_TEMP_FILE} <FLAGS> <OBJECTS> /Fe<TARGET> -link <CMAKE_C_LINK_FLAGS> <LINK_FLAGS> <LINK_LIBRARIES>${CMAKE_END_TEMP_FILE}")
    SET (CMAKE_COMPILE_RESOURCE "rc <FLAGS> /fo<OBJECT> <SOURCE>")
    SET (CMAKE_CXX_LINK_EXECUTABLE
      "<CMAKE_CXX_COMPILER> ${CMAKE_CL_NOLOGO} ${CMAKE_START_TEMP_FILE} <FLAGS> <OBJECTS> /Fe<TARGET> -link <CMAKE_CXX_LINK_FLAGS> <LINK_FLAGS> <LINK_LIBRARIES>${CMAKE_END_TEMP_FILE}")
  ENDIF (${CMAKE_CXX_COMPILER} MATCHES icl)
ENDIF (${CMAKE_CXX_COMPILER} MATCHES cl)

INCLUDE (CMakeBackwardCompatibilityC)
INCLUDE (CMakeBackwardCompatibilityCXX)
# Include the standard Dart testing module
#INCLUDE (Dart)

#INCLUDE (TestBigEndian)
#TEST_BIG_ENDIAN(BYTE_ORDER)
IF (CMAKE_WORDS_BIGENDIAN EQUAL 0)
  SET (BYTE_ORDER "LITTLE_ENDIAN" CACHE INTERNAL "System little endian")
ELSE  (CMAKE_WORDS_BIGENDIAN EQUAL 0)
  SET (BYTE_ORDER "BIG_ENDIAN" CACHE INTERNAL "System big endian")
ENDIF (CMAKE_WORDS_BIGENDIAN EQUAL 0)

# Check for headers
INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES} /usr/local/include)
IF (NOT WIN32 AND UNIX)
  LINK_DIRECTORIES(${LINK_DIRECTORIES} /usr/local/lib)
ENDIF (NOT WIN32 AND UNIX)

#INCLUDE (CheckIncludeFiles)
INCLUDE (builds/cmake/CheckIncludeFile.cmake)
INCLUDE (CheckIncludeFileCXX)

SET (CMAKE_REQUIRED_INCLUDES /usr/local/include /opt/firebird/include)
IF (CMAKE_COMPILER_IS_GNUCXX)
  STRING (REPLACE -Werror "" CMAKE_REQUIRED_FLAGS ${CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER}})
ENDIF (CMAKE_COMPILER_IS_GNUCXX)

CHECK_INCLUDE_FILE(stdio.h HAVE_STDIO_H)
CHECK_INCLUDE_FILE(stdlib.h HAVE_STDLIB_H)
CHECK_INCLUDE_FILE(malloc.h HAVE_MALLOC_H)
CHECK_INCLUDE_FILE(memory.h HAVE_MEMORY_H)
CHECK_INCLUDE_FILE(dirent.h HAVE_DIRENT_H)
CHECK_INCLUDE_FILE(error.h HAVE_ERROR_H)
CHECK_INCLUDE_FILE(ibase.h HAVE_IBASE_H)
CHECK_INCLUDE_FILE(pcap.h HAVE_PCAP_H)
CHECK_INCLUDE_FILE(mysql.h HAVE_MYSQL_H)
IF (NOT HAVE_MYSQL_H)
CHECK_INCLUDE_FILE(mysql/mysql.h HAVE_MYSQL_MYSQL_H)
ENDIF (NOT HAVE_MYSQL_H)
CHECK_INCLUDE_FILE(lzo/lzo1x.h HAVE_LZO_LZO1X_H)
CHECK_INCLUDE_FILE(lzo1x.h HAVE_LZO1X_H)
CHECK_INCLUDE_FILE(lzo/lzo_asm.h HAVE_LZO_LZO_ASM_H)
CHECK_INCLUDE_FILE(lzo_asm.h HAVE_LZO_ASM_H)
CHECK_INCLUDE_FILE(sysexits.h HAVE_SYSEXITS_H)
CHECK_INCLUDE_FILE(utime.h HAVE_UTIME_H)
CHECK_INCLUDE_FILE(sys/mount.h HAVE_SYS_MOUNT_H)
CHECK_INCLUDE_FILE(sys/utime.h HAVE_SYS_UTIME_H)
CHECK_INCLUDE_FILE(sys/endian.h HAVE_SYS_ENDIAN_H)
CHECK_INCLUDE_FILE(sys/types.h HAVE_SYS_TYPES_H)
CHECK_INCLUDE_FILE(sys/ipc.h HAVE_SYS_IPC_H)
CHECK_INCLUDE_FILE(sys/sem.h HAVE_SYS_SEM_H)
CHECK_INCLUDE_FILE(sys/param.h HAVE_SYS_PARAM_H)
CHECK_INCLUDE_FILE(sys/utsname.h HAVE_SYS_UTSNAME_H)
CHECK_INCLUDE_FILE(sys/socket.h HAVE_SYS_SOCKET_H)
CHECK_INCLUDE_FILE(sys/mman.h HAVE_SYS_MMAN_H)
CHECK_INCLUDE_FILE(sys/time.h HAVE_SYS_TIME_H)
CHECK_INCLUDE_FILE(sys/resource.h HAVE_SYS_RESOURCE_H)
CHECK_INCLUDE_FILE(sys/stat.h HAVE_SYS_STAT_H)
CHECK_INCLUDE_FILE(sys/ioctl.h HAVE_SYS_IOCTL_H)
CHECK_INCLUDE_FILE(sys/epoll.h HAVE_SYS_EPOLL_H)
CHECK_INCLUDE_FILE(time.h HAVE_TIME_H)
CHECK_INCLUDE_FILE(aio.h HAVE_AIO_H)
CHECK_INCLUDE_FILE(sha256.h HAVE_SHA256_H)
CHECK_INCLUDE_FILE(netinet/in.h HAVE_NETINET_IN_H)
CHECK_INCLUDE_FILE(arpa/inet.h HAVE_ARPA_INET_H)
CHECK_INCLUDE_FILE(netdb.h HAVE_NETDB_H)
CHECK_INCLUDE_FILE(pwd.h HAVE_PWD_H)
CHECK_INCLUDE_FILE(grp.h HAVE_GRP_H)
CHECK_INCLUDE_FILE(limits.h HAVE_LIMITS_H)
CHECK_INCLUDE_FILE(io.h HAVE_IO_H)
CHECK_INCLUDE_FILE(err.h HAVE_ERR_H)
CHECK_INCLUDE_FILE(errno.h HAVE_ERRNO_H)
CHECK_INCLUDE_FILE(float.h HAVE_FLOAT_H)
CHECK_INCLUDE_FILE(fcntl.h HAVE_FCNTL_H)
CHECK_INCLUDE_FILE(stdarg.h HAVE_STDARG_H)
CHECK_INCLUDE_FILE(math.h HAVE_MATH_H)
CHECK_INCLUDE_FILE(locale.h HAVE_LOCALE_H)
CHECK_INCLUDE_FILE(pthread.h HAVE_PTHREAD_H)
CHECK_INCLUDE_FILE(signal.h HAVE_SIGNAL_H)
CHECK_INCLUDE_FILE(typeinfo.h HAVE_TYPEINFO_H)
CHECK_INCLUDE_FILE(dlfcn.h HAVE_DLFCN_H)
CHECK_INCLUDE_FILE(assert.h HAVE_ASSERT_H)
CHECK_INCLUDE_FILE(semaphore.h HAVE_SEMAPHORE_H)
CHECK_INCLUDE_FILE(process.h HAVE_PROCESS_H)
CHECK_INCLUDE_FILE(ctype.h HAVE_CTYPE_H)
CHECK_INCLUDE_FILE(stdint.h HAVE_STDINT_H)
CHECK_INCLUDE_FILE(inttypes.h HAVE_INTTYPES_H)
CHECK_INCLUDE_FILE(unistd.h HAVE_UNISTD_H)
CHECK_INCLUDE_FILE(stddef.h HAVE_STDDEF_H)
CHECK_INCLUDE_FILE(paths.h HAVE_PATHS_H)
CHECK_INCLUDE_FILE(uuid.h HAVE_UUID_H)
CHECK_INCLUDE_FILE(ucontext.h HAVE_UCONTEXT_H)
CHECK_INCLUDE_FILE(syslog.h HAVE_SYSLOG_H)
CHECK_INCLUDE_FILE(sched.h HAVE_SCHED_H)
CHECK_INCLUDE_FILE(demangle.h HAVE_DEMANGLE_H)
CHECK_INCLUDE_FILE(libiberty/demangle.h HAVE_LIBIBERTY_DEMANGLE_H)
CHECK_INCLUDE_FILE_CXX(stdexept HAVE_STDEXCEPT)
CHECK_INCLUDE_FILE_CXX(new HAVE_NEW)
CHECK_INCLUDE_FILE_CXX(typeinfo HAVE_TYPEINFO)

CHECK_INCLUDE_FILE(winsock.h HAVE_WINSOCK_H)
CHECK_INCLUDE_FILE(winsock2.h HAVE_WINSOCK2_H)
CHECK_INCLUDE_FILE(windows.h HAVE_WINDOWS_H)
CHECK_INCLUDE_FILE(ntstatus.h HAVE_NTSTATUS_H)
CHECK_INCLUDE_FILE(winternl.h HAVE_WINTERNL_H)
CHECK_INCLUDE_FILE(ntdll.h HAVE_NTDLL_H)
CHECK_INCLUDE_FILE(ntstatus.h HAVE_NTSTATUS_H)

IF (${HAVE_WINSOCK2_H})
  SET (CMAKE_EXTRA_INCLUDE_FILES winsock2.h)
ELSE (${HAVE_WINSOCK2_H})
  IF (${HAVE_WINSOCK_H})
    SET (CMAKE_EXTRA_INCLUDE_FILES winsock.h)
  ENDIF (${HAVE_WINSOCK_H})
ENDIF (${HAVE_WINSOCK2_H})
CHECK_INCLUDE_FILE(ws2tcpip.h HAVE_WS2TCPIP_H)
CHECK_INCLUDE_FILE(mswsock.h HAVE_MSWSOCK_H)

SET (CMAKE_EXTRA_INCLUDE_FILES windows.h)
CHECK_INCLUDE_FILE(tlhelp32.h HAVE_TLHELP32_H)
CHECK_INCLUDE_FILE(iphlpapi.h HAVE_IPHLPAPI_H)
CHECK_INCLUDE_FILE(wbemidl.h HAVE_WBEMIDL_H)
CHECK_INCLUDE_FILE(dbghelp.h HAVE_DBGHELP_H)

SET (CMAKE_EXTRA_INCLUDE_FILES sys/types.h)
CHECK_INCLUDE_FILE(sys/timeb.h HAVE_SYS_TIMEB_H)
CHECK_INCLUDE_FILE(sys/event.h HAVE_SYS_EVENT_H)
CHECK_INCLUDE_FILE(sys/uuid.h HAVE_SYS_UUID_H)
CHECK_INCLUDE_FILE(machine/atomic.h HAVE_MACHINE_ATOMIC_H)
CHECK_INCLUDE_FILE(machine/cpufunc.h HAVE_MACHINE_CPUFUNC_H)
CHECK_INCLUDE_FILE(machine/specialreg.h HAVE_MACHINE_SPECIALREG_H)
CHECK_INCLUDE_FILE(sys/sysctl.h HAVE_SYS_SYSCTL_H)

SET (CMAKE_EXTRA_INCLUDE_FILES sys/types.h sys/socket.h netinet/in.h netinet/in_systm.h netinet/ip.h)
CHECK_INCLUDE_FILE(netinet/in_systm.h HAVE_NETINET_IN_SYSTM_H)
CHECK_INCLUDE_FILE(netinet/ip.h HAVE_NETINET_IP_H)
CHECK_INCLUDE_FILE(netinet/tcp.h HAVE_NETINET_TCP_H)
CHECK_INCLUDE_FILE(net/if.h HAVE_NET_IF_H)
CHECK_INCLUDE_FILE(net/if_types.h HAVE_NET_IF_TYPES_H)
CHECK_INCLUDE_FILE(net/route.h HAVE_NET_ROUTE_H)
CHECK_INCLUDE_FILE(net/ethernet.h HAVE_NET_ETHERNET_H)
CHECK_INCLUDE_FILE(net/if_dl.h HAVE_NET_IF_DL_H)

SET (CMAKE_EXTRA_INCLUDE_FILES)

# Check for types

INCLUDE (builds/cmake/CheckTypeSize.cmake)

SET (CMAKE_EXTRA_INCLUDE_FILES
  sys/types.h
  stdint.h
  inttypes.h
  sys/time.h
  sys/uuid.h
  sys/event.h
  sys/utime.h
  sys/endian.h
  ucontext.h
  utime.h
  uuid.h
  aio.h
  guiddef.h
  stddef.h
)

CHECK_TYPE_SIZE (ptrdiff_t SIZEOF_PTRDIFF_T)
CHECK_TYPE_SIZE ("void *" SIZEOF_VOID_P)
CHECK_TYPE_SIZE (bool SIZEOF_BOOL)
CHECK_TYPE_SIZE (char SIZEOF_CHAR)
CHECK_TYPE_SIZE (wchar_t SIZEOF_WCHAR_T)
CHECK_TYPE_SIZE (short SIZEOF_SHORT)
CHECK_TYPE_SIZE (int SIZEOF_INT)
CHECK_TYPE_SIZE (long SIZEOF_LONG)
CHECK_TYPE_SIZE ("long long" SIZEOF_LONG_LONG)
CHECK_TYPE_SIZE ("long int" SIZEOF_LONG_INT)
CHECK_TYPE_SIZE ("long double" SIZEOF_LONG_DOUBLE)
CHECK_TYPE_SIZE (intptr_t SIZEOF_INTPTR_T)
CHECK_TYPE_SIZE (intmax_t SIZEOF_INTMAX_T)
CHECK_TYPE_SIZE (pid_t SIZEOF_PID_T)
CHECK_TYPE_SIZE (uid_t SIZEOF_UID_T)
CHECK_TYPE_SIZE (gid_t SIZEOF_GID_T)
CHECK_TYPE_SIZE (uuid_t SIZEOF_UUID_T)
CHECK_TYPE_SIZE (__int8 SIZEOF__INT8)
CHECK_TYPE_SIZE (__int16 SIZEOF__INT16)
CHECK_TYPE_SIZE (__int32 SIZEOF__INT32)
CHECK_TYPE_SIZE (__int64 SIZEOF__INT64)
CHECK_TYPE_SIZE (int8_t SIZEOF_INT8_T)
CHECK_TYPE_SIZE (int16_t SIZEOF_INT16_T)
CHECK_TYPE_SIZE (int32_t SIZEOF_INT32_T)
CHECK_TYPE_SIZE (int64_t SIZEOF_INT64_T)
CHECK_TYPE_SIZE (intmax_t SIZEOF_INTMAX_T)
CHECK_TYPE_SIZE (ucontext_t SIZEOF_UCONTEXT_T)

CHECK_TYPE_SIZE ("struct timeval" SIZEOF_TIMEVAL)
CHECK_TYPE_SIZE ("struct timezone" SIZEOF_TIMEZONE)
CHECK_TYPE_SIZE ("struct aiocb" SIZEOF_AIOCB)
CHECK_TYPE_SIZE ("struct uuid" SIZEOF_UUID)
CHECK_TYPE_SIZE ("struct kevent" SIZEOF_KEVENT)
CHECK_TYPE_SIZE ("struct utimbuf" SIZEOF_UTIMBUF)

SET (CMAKE_EXTRA_INCLUDE_FILES windows.h guiddef.h)
CHECK_TYPE_SIZE (GUID SIZEOF_GUID)

IF (${HAVE_WINSOCK2_H})
  SET (CMAKE_EXTRA_INCLUDE_FILES winsock2.h)
ELSE (${HAVE_WINSOCK2_H})
  IF (${HAVE_WINSOCK_H})
    SET (CMAKE_EXTRA_INCLUDE_FILES winsock.h)
  ENDIF (${HAVE_WINSOCK_H})
ENDIF (${HAVE_WINSOCK2_H})
SET (CMAKE_EXTRA_INCLUDE_FILES
  ${CMAKE_EXTRA_INCLUDE_FILES}
  ws2tcpip.h
  netinet/in.h
  arpa/inet.h
  sys/socket.h
  net/if_dl.h
)
CHECK_TYPE_SIZE ("struct sockaddr_in6" SIZEOF_SOCKADDR_IN6)
CHECK_TYPE_SIZE ("struct sockaddr_dl" SIZEOF_SOCKADDR_DL)
CHECK_TYPE_SIZE (socklen_t SIZEOF_SOCKLEN_T)

SET (CMAKE_EXTRA_INCLUDE_FILES sys/stat.h)

CHECK_TYPE_SIZE ("struct stat64" SIZEOF_STAT64)
CHECK_TYPE_SIZE ("struct _stat64" SIZEOF__STAT64)

SET (CMAKE_EXTRA_INCLUDE_FILES)

INCLUDE (builds/cmake/CheckTypeEqual.cmake)

CHECK_TYPE_EQUAL (intptr_t int HAVE_INTPTR_T_AS_INT)
CHECK_TYPE_EQUAL (intptr_t long HAVE_INTPTR_T_AS_LONG)
CHECK_TYPE_EQUAL (intptr_t "long int" HAVE_INTPTR_T_AS_LONG_INT)
CHECK_TYPE_EQUAL (intptr_t "long long" HAVE_INTPTR_T_AS_LONG_LONG)
CHECK_TYPE_EQUAL (intptr_t int32_t HAVE_INTPTR_T_AS_INT32_T)
CHECK_TYPE_EQUAL (intptr_t int64_t HAVE_INTPTR_T_AS_INT64_T)
CHECK_TYPE_EQUAL (intptr_t intmax_t HAVE_INTPTR_T_AS_INTMAX_T)

CHECK_TYPE_EQUAL (int intptr_t HAVE_INT_AS_INTPTR_T)
CHECK_TYPE_EQUAL (int long HAVE_INT_AS_LONG)
CHECK_TYPE_EQUAL (int "long int" HAVE_INT_AS_LONG_INT)
CHECK_TYPE_EQUAL (int "long long" HAVE_INT_AS_LONG_LONG)
CHECK_TYPE_EQUAL (int int32_t HAVE_INT_AS_INT32_T)
CHECK_TYPE_EQUAL (int int64_t HAVE_INT_AS_INT64_T)
CHECK_TYPE_EQUAL (int intmax_t HAVE_INT_AS_INTMAX_T)

CHECK_TYPE_EQUAL (long intptr_t HAVE_LONG_AS_INTPTR_T)
CHECK_TYPE_EQUAL (long "long int" HAVE_LONG_AS_LONG_INT)
CHECK_TYPE_EQUAL (long "long long" HAVE_LONG_AS_LONG_LONG)
CHECK_TYPE_EQUAL (long int32_t HAVE_LONG_AS_INT32_T)
CHECK_TYPE_EQUAL (long int64_t HAVE_LONG_AS_INT64_T)
CHECK_TYPE_EQUAL (long intmax_t HAVE_LONG_AS_INTMAX_T)

CHECK_TYPE_EQUAL ("long int" intptr_t HAVE_LONG_INT_AS_INTPTR_T)
CHECK_TYPE_EQUAL ("long int" long HAVE_LONG_INT_AS_LONG)
CHECK_TYPE_EQUAL ("long int" "long long" HAVE_LONG_INT_AS_LONG_LONG)
CHECK_TYPE_EQUAL ("long int" int32_t HAVE_LONG_INT_AS_INT32_T)
CHECK_TYPE_EQUAL ("long int" int64_t HAVE_LONG_INT_AS_INT64_T)
CHECK_TYPE_EQUAL ("long int" intmax_t HAVE_LONG_INT_AS_INTMAX_T)

CHECK_TYPE_EQUAL (int32_t intptr_t HAVE_INT32_T_AS_INTPTR_T)
CHECK_TYPE_EQUAL (int32_t long HAVE_INT32_T_AS_LONG)
CHECK_TYPE_EQUAL (int32_t "long int" HAVE_INT32_T_AS_LONG_INT)
CHECK_TYPE_EQUAL (int32_t "long long" HAVE_INT32_T_AS_LONG_LONG)
CHECK_TYPE_EQUAL (int32_t intmax_t HAVE_INT32_T_AS_INTMAX_T)

CHECK_TYPE_EQUAL (int64_t intptr_t HAVE_INT64_T_AS_INTPTR_T)
CHECK_TYPE_EQUAL (int64_t long HAVE_INT64_T_AS_LONG)
CHECK_TYPE_EQUAL (int64_t "long int" HAVE_INT64_T_AS_LONG_INT)
CHECK_TYPE_EQUAL (int64_t "long long" HAVE_INT64_T_AS_LONG_LONG)
CHECK_TYPE_EQUAL (int64_t intmax_t HAVE_INT64_T_AS_INTMAX_T)

CHECK_TYPE_EQUAL (intmax_t intptr_t HAVE_INTMAX_T_AS_INTPTR_T)
CHECK_TYPE_EQUAL (intmax_t int HAVE_INTMAX_T_AS_INT)
CHECK_TYPE_EQUAL (intmax_t long HAVE_INTMAX_T_AS_LONG)
CHECK_TYPE_EQUAL (intmax_t "long int" HAVE_INTMAX_T_AS_LONG_INT)
CHECK_TYPE_EQUAL (intmax_t "long long" HAVE_INTMAX_T_AS_LONG_LONG)
CHECK_TYPE_EQUAL (intmax_t int64_t HAVE_INTMAX_T_AS_INT64_T)

# Checks for library functions.
INCLUDE (CheckFunctionExists)

CHECK_FUNCTION_EXISTS (chown HAVE_CHOWN)
CHECK_FUNCTION_EXISTS (opendir HAVE_OPENDIR)
CHECK_FUNCTION_EXISTS (closedir HAVE_CLOSEDIR)
CHECK_FUNCTION_EXISTS (malloc HAVE_MALLOC)
CHECK_FUNCTION_EXISTS (realloc HAVE_REALLOC)
CHECK_FUNCTION_EXISTS (memcmp HAVE_MEMCMP)
CHECK_FUNCTION_EXISTS (mktime HAVE_MKTIME)
CHECK_FUNCTION_EXISTS (timegm HAVE_TIMEGM)
CHECK_FUNCTION_EXISTS (stat HAVE_STAT)
CHECK_FUNCTION_EXISTS (strerror_r HAVE_STRERROR_R)
CHECK_FUNCTION_EXISTS (utime HAVE_UTIME)
CHECK_FUNCTION_EXISTS (_utime HAVE__UTIME)
CHECK_FUNCTION_EXISTS (vprintf HAVE_VPRINTF)
CHECK_FUNCTION_EXISTS (localtime HAVE_LOCALTIME)
CHECK_FUNCTION_EXISTS (gmtime_s HAVE_GMTIME_S)
CHECK_FUNCTION_EXISTS (gmtime HAVE_GMTIME)
CHECK_FUNCTION_EXISTS (getpwnam HAVE_GETPWNAM)
CHECK_FUNCTION_EXISTS (getgrnam HAVE_GETGRNAM)
CHECK_FUNCTION_EXISTS (floor HAVE_FLOOR)
CHECK_FUNCTION_EXISTS (floorl HAVE_FLOORL)
CHECK_FUNCTION_EXISTS (ftruncate HAVE_FTRUNCATE)
CHECK_FUNCTION_EXISTS (getcwd HAVE_GETCWD)
CHECK_FUNCTION_EXISTS (getpagesize HAVE_GETPAGESIZE)
CHECK_FUNCTION_EXISTS (gettimeofday HAVE_GETTIMEOFDAY)
CHECK_FUNCTION_EXISTS (memmove HAVE_MEMMOVE)
CHECK_FUNCTION_EXISTS (memset HAVE_MEMSET)
CHECK_FUNCTION_EXISTS (memcpy HAVE_MEMCPY)
CHECK_FUNCTION_EXISTS (strcasecmp HAVE_STRCASECMP)
CHECK_FUNCTION_EXISTS (strchr HAVE_STRCHR)
CHECK_FUNCTION_EXISTS (strncasecmp HAVE_STRNCASECMP)
CHECK_FUNCTION_EXISTS (strstr HAVE_STRSTR)
CHECK_FUNCTION_EXISTS (sprintf HAVE_SPRINTF)
CHECK_FUNCTION_EXISTS (_sprintf HAVE__SPRINTF)
CHECK_FUNCTION_EXISTS (vsprintf HAVE_VSPRINTF)
CHECK_FUNCTION_EXISTS (snprintf HAVE_SNPRINTF)
CHECK_FUNCTION_EXISTS (_snprintf HAVE__SNPRINTF)
CHECK_FUNCTION_EXISTS (vsnprintf HAVE_VSNPRINTF)
CHECK_FUNCTION_EXISTS (sscanf HAVE_SSCANF)
CHECK_FUNCTION_EXISTS (_sscanf HAVE__SSCANF)
CHECK_FUNCTION_EXISTS (snscanf HAVE_SNSCANF)
CHECK_FUNCTION_EXISTS (_snscanf HAVE__SNSCANF)
CHECK_FUNCTION_EXISTS (_chsize HAVE__CHSIZE)
CHECK_FUNCTION_EXISTS (chsize HAVE_CHSIZE)
CHECK_FUNCTION_EXISTS (fstat HAVE_FSTAT)
CHECK_FUNCTION_EXISTS (utime HAVE_UTIME)
CHECK_FUNCTION_EXISTS (utimes HAVE_UTIMES)
CHECK_FUNCTION_EXISTS (nanosleep HAVE_NANOSLEEP)
CHECK_FUNCTION_EXISTS (sleep HAVE_SLEEP)
CHECK_FUNCTION_EXISTS (usleep HAVE_USLEEP)
CHECK_FUNCTION_EXISTS (pread HAVE_PREAD)
CHECK_FUNCTION_EXISTS (pwrite HAVE_PWRITE)
CHECK_FUNCTION_EXISTS (getuid HAVE_GETUID)
CHECK_FUNCTION_EXISTS (getgid HAVE_GETGID)
CHECK_FUNCTION_EXISTS (getpid HAVE_GETPID)
CHECK_FUNCTION_EXISTS (gettid HAVE_GETTID)
CHECK_FUNCTION_EXISTS (sem_init HAVE_SEM_INIT)
CHECK_FUNCTION_EXISTS (sem_close HAVE_SEM_CLOSE)
CHECK_FUNCTION_EXISTS (sem_open HAVE_SEM_OPEN)
CHECK_FUNCTION_EXISTS (sem_unlink HAVE_SEM_UNLINK)
CHECK_FUNCTION_EXISTS (sem_timedwait HAVE_SEM_TIMEDWAIT)
CHECK_FUNCTION_EXISTS (uname HAVE_UNAME)
CHECK_FUNCTION_EXISTS (umask HAVE_UMASK)
CHECK_FUNCTION_EXISTS (readdir_r HAVE_READDIR_R)
CHECK_FUNCTION_EXISTS (socket HAVE_SOCKET)
CHECK_FUNCTION_EXISTS (mkdir HAVE_MKDIR)
CHECK_FUNCTION_EXISTS (inet_ntoa HAVE_INET_NTOA)
CHECK_FUNCTION_EXISTS (gethostbyname HAVE_GETHOSTBYNAME)
CHECK_FUNCTION_EXISTS (gethostbyname2 HAVE_GETHOSTBYNAME2)
CHECK_FUNCTION_EXISTS (gethostbyaddr HAVE_GETHOSTBYADDR)
CHECK_FUNCTION_EXISTS (getnameinfo HAVE_GETNAMEINFO)
CHECK_FUNCTION_EXISTS (getaddrinfo HAVE_GETADDRINFO)
CHECK_FUNCTION_EXISTS (strerror HAVE_STRERROR)
CHECK_FUNCTION_EXISTS (sysconf HAVE_SYSCONF)
CHECK_FUNCTION_EXISTS (sigwait HAVE_SIGWAIT)
CHECK_FUNCTION_EXISTS (rmdir HAVE_RMDIR)
CHECK_FUNCTION_EXISTS (_isatty HAVE__ISATTY)
CHECK_FUNCTION_EXISTS (isatty HAVE_ISATTY)
CHECK_FUNCTION_EXISTS (_fileno HAVE__FILENO)
CHECK_FUNCTION_EXISTS (fileno HAVE_FILENO)
CHECK_FUNCTION_EXISTS (kqueue HAVE_KQUEUE)
CHECK_FUNCTION_EXISTS (kevent HAVE_KEVENT)
CHECK_FUNCTION_EXISTS (aio_read HAVE_AIO_READ)
CHECK_FUNCTION_EXISTS (aio_write HAVE_AIO_WRITE)
CHECK_FUNCTION_EXISTS (aio_return HAVE_AIO_RETURN)
CHECK_FUNCTION_EXISTS (aio_error HAVE_AIO_ERROR)
CHECK_FUNCTION_EXISTS (mmap HAVE_MMAP)
CHECK_FUNCTION_EXISTS (munmap HAVE_MUNMAP)
CHECK_FUNCTION_EXISTS (mlock HAVE_MLOCK)
CHECK_FUNCTION_EXISTS (munlock HAVE_MUNLOCK)
CHECK_FUNCTION_EXISTS (mlockall HAVE_MLOCKALL)
CHECK_FUNCTION_EXISTS (munlockall HAVE_MUNLOCKALL)
CHECK_FUNCTION_EXISTS (shm_open HAVE_SHM_OPEN)
CHECK_FUNCTION_EXISTS (shm_unlink HAVE_SHM_UNLINK)
CHECK_FUNCTION_EXISTS (daemon HAVE_DAEMON)
CHECK_FUNCTION_EXISTS (uuidgen HAVE_UUIDGEN)
CHECK_FUNCTION_EXISTS (uuid_create HAVE_UUID_CREATE)
CHECK_FUNCTION_EXISTS (uuid_from_string HAVE_UUID_FROM_STRING)
CHECK_FUNCTION_EXISTS (semget HAVE_SEMGET)
CHECK_FUNCTION_EXISTS (semop HAVE_SEMOP)
CHECK_FUNCTION_EXISTS (semctl HAVE_SEMCTL)
CHECK_FUNCTION_EXISTS (ftok HAVE_FTOK)
CHECK_FUNCTION_EXISTS (exit HAVE_EXIT)
CHECK_FUNCTION_EXISTS (_tzset HAVE__TZSET)
CHECK_FUNCTION_EXISTS (tzset HAVE_TZSET)
CHECK_FUNCTION_EXISTS (nice HAVE_NICE)
CHECK_FUNCTION_EXISTS (clock_getres HAVE_CLOCK_GETRES)
CHECK_FUNCTION_EXISTS (clock_gettime HAVE_CLOCK_GETTIME)
CHECK_FUNCTION_EXISTS (setpriority HAVE_SETPRIORITY)
CHECK_FUNCTION_EXISTS (getpriority HAVE_GETPRIORITY)

CHECK_FUNCTION_EXISTS (pthread_create HAVE_PTHREAD_CREATE)
CHECK_FUNCTION_EXISTS (pthread_detach HAVE_PTHREAD_DETACH)
CHECK_FUNCTION_EXISTS (pthread_self HAVE_PTHREAD_SELF)
CHECK_FUNCTION_EXISTS (pthread_yield HAVE_PTHREAD_YIELD)
CHECK_FUNCTION_EXISTS (pthread_join HAVE_PTHREAD_JOIN)
CHECK_FUNCTION_EXISTS (pthread_setcancelstate HAVE_PTHREAD_SETCANCELSTATE)
CHECK_FUNCTION_EXISTS (pthread_attr_setguardsize HAVE_PTHREAD_ATTR_SETGUARDSIZE)
CHECK_FUNCTION_EXISTS (pthread_attr_getstack HAVE_PTHREAD_ATTR_GETSTACK)
CHECK_FUNCTION_EXISTS (pthread_getprio HAVE_PTHREAD_GETPRIO)
CHECK_FUNCTION_EXISTS (pthread_setprio HAVE_PTHREAD_SETPRIO)
CHECK_FUNCTION_EXISTS (pthread_attr_getschedparam HAVE_PTHREAD_ATTR_GETSHEDPARAM)
CHECK_FUNCTION_EXISTS (pthread_attr_setschedparam HAVE_PTHREAD_ATTR_SETSHEDPARAM)
CHECK_FUNCTION_EXISTS (pthread_rwlock_init HAVE_PTHREAD_RWLOCK_INIT)
CHECK_FUNCTION_EXISTS (pthread_rwlock_destroy HAVE_PTHREAD_RWLOCK_DESTROY)
CHECK_FUNCTION_EXISTS (pthread_rwlock_rdlock HAVE_PTHREAD_RWLOCK_RDLOCK)
CHECK_FUNCTION_EXISTS (pthread_rwlock_tryrdlock HAVE_PTHREAD_TRYRDLOCK)
CHECK_FUNCTION_EXISTS (pthread_rwlock_wrlock HAVE_PTHREAD_WRLOCK)
CHECK_FUNCTION_EXISTS (pthread_rwlock_trywrlock HAVE_PTHREAD_TRYWRLOCK)
CHECK_FUNCTION_EXISTS (pthread_rwlock_unlock HAVE_PTHREAD_UNLOCK)
CHECK_FUNCTION_EXISTS (getcontext HAVE_GETCONTEXT)
CHECK_FUNCTION_EXISTS (setcontext HAVE_SETCONTEXT)
CHECK_FUNCTION_EXISTS (makecontext HAVE_MAKECONTEXT)
CHECK_FUNCTION_EXISTS (swapcontext HAVE_SWAPCONTEXT)

SET (CMAKE_EXTRA_INCLUDE_FILES)

INCLUDE (CheckSymbolExists)
CHECK_SYMBOL_EXISTS (be16enc sys/endian.h HAVE_BE16ENC)
CHECK_SYMBOL_EXISTS (be32enc sys/endian.h HAVE_BE32ENC)
CHECK_SYMBOL_EXISTS (be64enc sys/endian.h HAVE_BE64ENC)
CHECK_SYMBOL_EXISTS (be16toh sys/endian.h HAVE_BE16TOH)
CHECK_SYMBOL_EXISTS (be32toh sys/endian.h HAVE_BE32TOH)
CHECK_SYMBOL_EXISTS (be64toh sys/endian.h HAVE_BE64TOH)
CHECK_SYMBOL_EXISTS (le16enc sys/endian.h HAVE_LE16ENC)
CHECK_SYMBOL_EXISTS (le32enc sys/endian.h HAVE_LE32ENC)
CHECK_SYMBOL_EXISTS (le64enc sys/endian.h HAVE_LE64ENC)
CHECK_SYMBOL_EXISTS (le16toh sys/endian.h HAVE_LE16TOH)
CHECK_SYMBOL_EXISTS (le32toh sys/endian.h HAVE_LE32TOH)
CHECK_SYMBOL_EXISTS (le64toh sys/endian.h HAVE_LE64TOH)
CHECK_SYMBOL_EXISTS (be16dec sys/endian.h HAVE_BE16DEC)
CHECK_SYMBOL_EXISTS (be32dec sys/endian.h HAVE_BE32DEC)
CHECK_SYMBOL_EXISTS (be64dec sys/endian.h HAVE_BE64DEC)
CHECK_SYMBOL_EXISTS (htobe16 sys/endian.h HAVE_HTOBE16)
CHECK_SYMBOL_EXISTS (htobe32 sys/endian.h HAVE_HTOBE32)
CHECK_SYMBOL_EXISTS (htobe64 sys/endian.h HAVE_HTOBE64)
CHECK_SYMBOL_EXISTS (le16dec sys/endian.h HAVE_LE16DEC)
CHECK_SYMBOL_EXISTS (le32dec sys/endian.h HAVE_LE32DEC)
CHECK_SYMBOL_EXISTS (le64dec sys/endian.h HAVE_LE64DEC)
CHECK_SYMBOL_EXISTS (htole16 sys/endian.h HAVE_HTOLE16)
CHECK_SYMBOL_EXISTS (htole32 sys/endian.h HAVE_HTOLE32)
CHECK_SYMBOL_EXISTS (htole64 sys/endian.h HAVE_HTOLE64)
CHECK_SYMBOL_EXISTS (_malloc_options stdlib.h HAVE__MALLOC_OPTIONS)
CHECK_SYMBOL_EXISTS (do_cpuid "sys/types.h;machine/cpufunc.h" HAVE_DO_CPUID)
CHECK_SYMBOL_EXISTS (atomic_fetchadd_32 "sys/types.h;machine/atomic.h" HAVE_ATOMIC_FETCHADD_32)

MACRO (CHECK_LIBRARY_EXISTS VARIABLE NAMES)
  SET (CMAKE_ALLOW_UNKNOWN_VARIABLE_READ_ACCESS 1)
  IF ("${VARIABLE}" MATCHES "^${VARIABLE}$")
    FIND_LIBRARY(${VARIABLE} NAMES ${NAMES})
    IF (${VARIABLE})
      MESSAGE (STATUS "Looking for library ${NAMES} - found")
    ELSE (${VARIABLE})
      MESSAGE (STATUS "Looking for library ${NAMES} - not found")
    ENDIF (${VARIABLE})
  ELSE ("${VARIABLE}" MATCHES "^${VARIABLE}$")
    FIND_LIBRARY(${VARIABLE} NAMES ${NAMES})
  ENDIF ("${VARIABLE}" MATCHES "^${VARIABLE}$")
  IF (${VARIABLE})
    SET (CMAKE_REQUIRED_LIBRARIES ${CMAKE_REQUIRED_LIBRARIES} "${NAMES}")
    LINK_LIBRARIES("${NAMES}")
  ENDIF (${VARIABLE})
  SET (CMAKE_ALLOW_UNKNOWN_VARIABLE_READ_ACCESS )
ENDMACRO (CHECK_LIBRARY_EXISTS)

SET (CMAKE_REQUIRED_FLAGS "-L/usr/local/lib")

#CHECK_LIBRARY_EXISTS (LIB_PCAP pcap)
CHECK_LIBRARY_EXISTS (LIB_LZO lzo)
CHECK_LIBRARY_EXISTS (LIB_LZO2 lzo2)
CHECK_LIBRARY_EXISTS (LIB_MD md)
CHECK_LIBRARY_EXISTS (LIB_IBERTY iberty)
#CHECK_LIBRARY_EXISTS (LIB_C_R c_r)
#IF (NOT CMAKE_SYSTEM_NAME STREQUAL FreeBSD)
#  CHECK_LIBRARY_EXISTS (LIB_PTHREAD pthread)
#ENDIF (NOT CMAKE_SYSTEM_NAME STREQUAL FreeBSD)
IF (CMAKE_SYSTEM_NAME STREQUAL Linux)
  CHECK_LIBRARY_EXISTS (LIB_PTHREAD dl)
  CHECK_LIBRARY_EXISTS (LIB_PTHREAD rtkaio)
ENDIF (CMAKE_SYSTEM_NAME STREQUAL Linux)

CHECK_FUNCTION_EXISTS (SHA256_Init HAVE_SHA256_INIT)
CHECK_FUNCTION_EXISTS (lzo1x_999_compress_level HAVE_LZO1X_999_COMPRESS_LEVEL)
CHECK_FUNCTION_EXISTS (lzo1x_decompress HAVE_LZO1X_DECOMPRESS)
CHECK_FUNCTION_EXISTS (lzo1x_decompress_safe HAVE_LZO1X_DECOMPRESS_SAFE)
CHECK_FUNCTION_EXISTS (lzo1x_decompress_asm HAVE_LZO1X_DECOMPRESS_ASM)
CHECK_FUNCTION_EXISTS (lzo1x_decompress_asm_safe HAVE_LZO1X_DECOMPRESS_ASM_SAFE)
CHECK_FUNCTION_EXISTS (lzo1x_decompress_asm_fast HAVE_LZO1X_DECOMPRESS_ASM_FAST)
CHECK_FUNCTION_EXISTS (lzo1x_decompress_asm_fast_safe HAVE_LZO1X_DECOMPRESS_ASM_FAST_SAFE)

IF (WIN32 AND NOT UNIX)

#FIND_LIBRARY(LIB_WS2_32 NAMES ws2_32)
#IF (LIB_WS2_32)
  LINK_LIBRARIES(ws2_32)
#ENDIF (LIB_WS2_32)

#FIND_LIBRARY(LIB_MSWSOCK NAMES mswsock)
#IF (LIB_MSWSOCK)
  LINK_LIBRARIES(mswsock)
#ENDIF (LIB_MSWSOCK)

#FIND_LIBRARY(LIB_IPHLPAPI NAMES iphlpapi)
#IF (LIB_IPHLPAPI)
  LINK_LIBRARIES(iphlpapi)
#ENDIF (LIB_IPHLPAPI)

#FIND_LIBRARY(LIB_DBGHELP NAMES dbghelp)
#IF (LIB_DBGHELP)
  LINK_LIBRARIES(dbghelp)
#ENDIF (LIB_DBGHELP)

#FIND_LIBRARY(LIB_RPCRT4 NAMES rpcrt4)
#IF (LIB_RPCRT4)
  LINK_LIBRARIES(rpcrt4)
#ENDIF (LIB_RPCRT4)

ENDIF (WIN32 AND NOT UNIX)

# Check for compiler features

INCLUDE (builds/cmake/CheckEmptyArraySize.cmake)

CHECK_EMPTY_ARRAY_SIZE (EMPTY_ARRAY_SIZE)

#ENABLE_TESTING()

INCLUDE_DIRECTORIES(${INCLUDE_DIRECTORIES} "${CMAKE_BINARY_DIR}/include")

#SET (CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER} "${CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER}} -fno-schedule-insns -fno-unit-at-a-time -O -g -fno-inline-functions -fno-omit-frame-pointer -fno-implicit-inline-templates -fstack-check")
#SET (CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER} "${CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER}} -O -g3 -fstack-check -fno-inline-functions -fno-default-inline -fno-inline -fno-builtin -fno-omit-frame-pointer -fno-defer-pop -fno-merge-constants -fno-thread-jumps -fno-loop-optimize -fno-if-conversion -fno-if-conversion2 -fno-delayed-branch -fno-guess-branch-probability -fno-cprop-registers")
#SET (CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER} "${CMAKE_CXX_FLAGS_${CMAKE_BUILD_TYPE_UPPER}} -g3 -fms-extensions -fno-elide-constructors -fno-enforce-eh-specs")

IF (CMAKE_COMPILER_IS_GNUCXX)
  IF (HAVE_DEMANGLE_H)
    SET (CMAKE_EXE_LINKER_FLAGS_${CMAKE_BUILD_TYPE_UPPER} "${CMAKE_EXE_LINKER_FLAGS_${CMAKE_BUILD_TYPE_UPPER}} -Wl,--export-dynamic")
  ENDIF (HAVE_DEMANGLE_H)
ENDIF (CMAKE_COMPILER_IS_GNUCXX)

CONFIGURE_FILE ("${CMAKE_BINARY_DIR}/include/adicpp/config.h.cmake" "${CMAKE_BINARY_DIR}/include/adicpp/config.h")

# Targets definition

ADD_SUBDIRECTORY (utils/version)

IF (WIN32 AND NOT UNIX)
  IF (EXISTS src/libpdbutils)
    ADD_SUBDIRECTORY (src/libpdbutils)
    SET (LIBPDBUTILS pdbutils)
  ENDIF (EXISTS src/libpdbutils)
  IF (EXISTS test/msmail1clib)
    ADD_SUBDIRECTORY (test/msmail1clib)
  ENDIF (EXISTS test/msmail1clib)
  IF (EXISTS test/mskey)
    ADD_SUBDIRECTORY (test/mskey)
  ENDIF (EXISTS test/mskey)
ENDIF (WIN32 AND NOT UNIX)

ADD_SUBDIRECTORY (src/libadicpp)
ADD_SUBDIRECTORY (src/libfbcpp)
ADD_SUBDIRECTORY (src/libksys)
ADD_SUBDIRECTORY (src/libmycpp)
ADD_SUBDIRECTORY (src/libutf8)
IF (EXISTS src/macroscope)
  ADD_SUBDIRECTORY (src/macroscope)
ELSE (EXISTS src/macroscope)
  ADD_SUBDIRECTORY (test/macroscope)
ENDIF (EXISTS src/macroscope)
IF (EXISTS test/msftp)
  ADD_SUBDIRECTORY (test/msftp)
ENDIF (EXISTS test/msftp)
IF (EXISTS test/msftpd)
  ADD_SUBDIRECTORY (test/msftpd)
ENDIF (EXISTS test/msftpd)
IF (EXISTS test/msmail)
  ADD_SUBDIRECTORY (test/msmail)
ENDIF (EXISTS test/msmail)
IF (EXISTS test/msupdater)
  ADD_SUBDIRECTORY (test/msupdater)
ENDIF (EXISTS test/msupdater)
IF (EXISTS test/msserial)
  ADD_SUBDIRECTORY (test/msserial)
ENDIF (EXISTS test/msserial)
IF (EXISTS doc)
  ADD_SUBDIRECTORY (doc)
ENDIF (EXISTS doc)

# Install

SET (CPACK_PACKAGE_DESCRIPTION_SUMMARY "")
SET (CPACK_PACKAGE_VENDOR "Korvin Software")
SET (CPACK_PACKAGE_EXECUTABLES "macroscope" "Macroscope")
SET (CPACK_PACKAGE_VERSION_MAJOR "1")
SET (CPACK_PACKAGE_VERSION_MINOR "0")
SET (CPACK_PACKAGE_VERSION_PATCH "962")
SET (CPACK_PACKAGE_INSTALL_DIRECTORY "macroscope")

# Try to get patch level from svn
FIND_PROGRAM(SVNCOMMAND svn)
IF (SVNCOMMAND)
  EXECUTE_PROCESS (
    COMMAND ${SVNCOMMAND} list -v CMakeLists.txt
    WORKING_DIRECTORY ${CMAKE_BINARY_DIR}
    RESULT_VARIABLE SVN_RESULT
    OUTPUT_VARIABLE SVN_OUTPUT
    ERROR_VARIABLE SVN_ERROR
  )
  IF (SVN_RESULT EQUAL 0)
    STRING (SUBSTRING "${SVN_OUTPUT}" 1 7 CPACK_PACKAGE_VERSION_PATCH)
    STRING (REGEX REPLACE " " "" CPACK_PACKAGE_VERSION_PATCH "${CPACK_PACKAGE_VERSION_PATCH}")
  ENDIF (SVN_RESULT EQUAL 0)
ENDIF (SVNCOMMAND)

SET (CPACK_SOURCE_PACKAGE_FILE_NAME "macroscope-${CPACK_PACKAGE_VERSION_MAJOR}.${CPACK_PACKAGE_VERSION_MINOR}.${CPACK_PACKAGE_VERSION_PATCH}")
IF (NOT DEFINED CPACK_SYSTEM_NAME)
  SET (CPACK_SYSTEM_NAME ${CMAKE_SYSTEM_NAME}-${CMAKE_SYSTEM_PROCESSOR})
ENDIF (NOT DEFINED CPACK_SYSTEM_NAME)
IF (${CPACK_SYSTEM_NAME} MATCHES Windows)
  IF (CMAKE_CL_64)
    SET (CPACK_SYSTEM_NAME win64-${CMAKE_SYSTEM_PROCESSOR})
  ELSE (CMAKE_CL_64)
    SET (CPACK_SYSTEM_NAME win32-${CMAKE_SYSTEM_PROCESSOR})
  ENDIF (CMAKE_CL_64)
ENDIF (${CPACK_SYSTEM_NAME} MATCHES Windows)
IF (NOT DEFINED CPACK_PACKAGE_FILE_NAME)
  SET (CPACK_PACKAGE_FILE_NAME "${CPACK_SOURCE_PACKAGE_FILE_NAME}-${CPACK_SYSTEM_NAME}")
ENDIF (NOT DEFINED CPACK_PACKAGE_FILE_NAME)

STRING (TOLOWER ${CMAKE_BUILD_TYPE} CMAKE_BUILD_TYPE_LOWER)
SET (CPACK_PACKAGE_FILE_NAME "${CPACK_PACKAGE_FILE_NAME}-${CMAKE_BUILD_TYPE_LOWER}")

#SET (install_target macroscope)

#SET (CPACK_GENERATOR "STGZ;TGZ;TZ")
SET (CPACK_GENERATOR "STGZ;TGZ")

IF (WIN32 AND NOT UNIX)
  FIND_PROGRAM(NSIS_MAKENSIS NAMES makensis
    PATHS [HKEY_LOCAL_MACHINE\\SOFTWARE\\NSIS]
    DOC "Where is makensis.exe located"
  )
  IF (NSIS_MAKENSIS)
#    SET (CPACK_NSIS_EXTRA_INSTALL_COMMANDS
#      "SetCompressor /SOLID lzma\\n"
#    )
    SET (CPACK_NSIS_EXTRA_INSTALL_COMMANDS
      "${CPACK_NSIS_EXTRA_INSTALL_COMMANDS}!include \\\"Library.nsh\\\"\\n"
    )
    SET (CPACK_NSIS_EXTRA_INSTALL_COMMANDS
      "${CPACK_NSIS_EXTRA_INSTALL_COMMANDS}!insertmacro InstallLib DLL SHARED REBOOT_NOTPROTECTED \\\${INST_DIR}\\\\msmail1clib.dll \\\$SYSDIR\\\\msmail1clib.dll $SYSDIR\\n"
    )
#    SET (CPACK_NSIS_EXTRA_INSTALL_COMMANDS
#      "${CPACK_NSIS_EXTRA_INSTALL_COMMANDS}nsExec::ExecToLog '\\\"$INSTDIR\\\\bin\\\\msmail.exe\\\" --install'\\n"
#    )
    SET (CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS
      "!include \\\"Library.nsh\\\"\\n"
    )
    SET (CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS
      "${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS}!insertmacro UnInstallLib DLL SHARED REBOOT_NOTPROTECTED \\\$SYSDIR\\\\msmail1clib.dll\\n"
    )
#    SET (CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS
#      "${CPACK_NSIS_EXTRA_UNINSTALL_COMMANDS}nsExec::ExecToLog '\\\"$INSTDIR\\\\bin\\\\msmail.exe\\\" --uninstall'\\n"
#    )
    SET (CPACK_NSIS_MODIFY_PATH OFF)
    SET (CPACK_NSIS_COMPRESSOR lzma)
    SET (CPACK_GENERATOR "${CPACK_GENERATOR};NSIS")
  ENDIF (NSIS_MAKENSIS)
ENDIF(WIN32 AND NOT UNIX)

#INCLUDE (InstallRequiredSystemLibraries)
INCLUDE (CPack)

#IF (APPLE)
  # Issue with packaging on the mac, so disable it for now
#  ADD_CUSTOM_COMMAND(
#    TARGET ${install_target}
#    POST_BUILD
#    COMMAND ${CMAKE_CTEST_COMMAND}
#    ARGS ${SI_CONFIG}
#    --build-and-test
#    ${CMAKE_SOURCE_DIR}
#    ${CMAKE_BINARY_DIR}
#    --build-generator ${CMAKE_GENERATOR}
#    --build-project ${PROJECT_NAME}
#    --build-makeprogram ${CMAKE_MAKE_PROGRAM}
#    --build-noclean
#    --build-target install
#    COMMENT "Install Project"
#  )
#ELSE (APPLE)
#  ADD_CUSTOM_COMMAND(
#    TARGET ${install_target}
#    POST_BUILD
#    COMMAND ${CMAKE_CTEST_COMMAND}
#    ARGS ${SI_CONFIG}
#    --build-and-test
#    ${CMAKE_SOURCE_DIR}
#    ${CMAKE_BINARY_DIR}
#    --build-generator ${CMAKE_GENERATOR}
#    --build-project ${PROJECT_NAME}
#    --build-makeprogram ${CMAKE_MAKE_PROGRAM}
#    --build-noclean
#    --build-target install
#    --build-target package
#    COMMENT "Install Project"
#  )
#ENDIF (APPLE)

INCLUDE (Documentation OPTIONAL)

#INCLUDE (builds/cmake/GetVariablesFromCMakeDashboards.cmake)

#cmake -P GetVariablesFromCMakeDashboards.cmake > CMakeVars.xml 2>&1
